{
  "openapi": "3.0.0",
  "info": {
    "title": "SpaceTraders API",
    "description": "SpaceTraders is an open-universe game and learning platform that offers a set of HTTP endpoints to control a fleet of ships and explore a multiplayer universe.\n\nThe API is documented using [OpenAPI](https://github.com/SpaceTradersAPI/api-docs). You can send your first request right here in your browser to check the status of the game server.\n\n```json http\n{\n  \"method\": \"GET\",\n  \"url\": \"https://api.spacetraders.io/v2\",\n}\n```\n\nUnlike a traditional game, SpaceTraders does not have a first-party client or app to play the game. Instead, you can use the API to build your own client, write a script to automate your ships, or try an app built by the community.\n\nWe have a [Discord channel](https://discord.com/invite/jh6zurdWk5) where you can share your projects, ask questions, and get help from other players.\n\n\n",
    "contact": {
      "name": "Joel Brubaker",
      "email": "joel@spacetraders.io"
    },
    "license": {
      "name": "No Permission",
      "url": "https://choosealicense.com/no-permission/"
    },
    "version": "2.0.0"
  },
  "servers": [
    {
      "url": "https://api.spacetraders.io/v2",
      "description": "v2"
    }
  ],
  "security": [
    {
      "AgentToken": []
    }
  ],
  "tags": [
    {
      "name": "Agents",
      "description": "Agents"
    },
    {
      "name": "Contracts",
      "description": "Contracts"
    },
    {
      "name": "Factions",
      "description": "Factions"
    },
    {
      "name": "Fleet",
      "description": "Fleet"
    },
    {
      "name": "Systems",
      "description": "Systems"
    }
  ],
  "paths": {
    "/": {
      "get": {
        "tags": [],
        "summary": "Get Status",
        "description": "Return the status of the game server.\nThis also includes a few global elements, such as announcements, server reset dates and leaderboards.",
        "operationId": "get-status",
        "responses": {
          "200": {
            "description": "Fetched status successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "announcements",
                    "description",
                    "leaderboards",
                    "links",
                    "resetDate",
                    "serverResets",
                    "stats",
                    "status",
                    "version"
                  ],
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "description": "The current status of the game server."
                    },
                    "version": {
                      "type": "string",
                      "description": "The current version of the API."
                    },
                    "resetDate": {
                      "type": "string",
                      "description": "The date when the game server was last reset."
                    },
                    "description": {
                      "type": "string"
                    },
                    "stats": {
                      "required": [
                        "agents",
                        "ships",
                        "systems",
                        "waypoints"
                      ],
                      "type": "object",
                      "properties": {
                        "agents": {
                          "type": "integer",
                          "description": "Number of registered agents in the game."
                        },
                        "ships": {
                          "type": "integer",
                          "description": "Total number of ships in the game."
                        },
                        "systems": {
                          "type": "integer",
                          "description": "Total number of systems in the game."
                        },
                        "waypoints": {
                          "type": "integer",
                          "description": "Total number of waypoints in the game."
                        }
                      }
                    },
                    "leaderboards": {
                      "required": [
                        "mostCredits",
                        "mostSubmittedCharts"
                      ],
                      "type": "object",
                      "properties": {
                        "mostCredits": {
                          "type": "array",
                          "description": "Top agents with the most credits.",
                          "items": {
                            "required": [
                              "agentSymbol",
                              "credits"
                            ],
                            "type": "object",
                            "properties": {
                              "agentSymbol": {
                                "type": "string",
                                "description": "Symbol of the agent."
                              },
                              "credits": {
                                "type": "integer",
                                "description": "Amount of credits.",
                                "format": "int64"
                              }
                            }
                          }
                        },
                        "mostSubmittedCharts": {
                          "type": "array",
                          "description": "Top agents with the most charted submitted.",
                          "items": {
                            "required": [
                              "agentSymbol",
                              "chartCount"
                            ],
                            "type": "object",
                            "properties": {
                              "agentSymbol": {
                                "type": "string",
                                "description": "Symbol of the agent."
                              },
                              "chartCount": {
                                "type": "integer",
                                "description": "Amount of charts done by the agent."
                              }
                            }
                          }
                        }
                      }
                    },
                    "serverResets": {
                      "required": [
                        "frequency",
                        "next"
                      ],
                      "type": "object",
                      "properties": {
                        "next": {
                          "type": "string",
                          "description": "The date and time when the game server will reset."
                        },
                        "frequency": {
                          "type": "string",
                          "description": "How often we intend to reset the game server."
                        }
                      }
                    },
                    "announcements": {
                      "type": "array",
                      "items": {
                        "required": [
                          "body",
                          "title"
                        ],
                        "type": "object",
                        "properties": {
                          "title": {
                            "type": "string"
                          },
                          "body": {
                            "type": "string"
                          }
                        }
                      }
                    },
                    "links": {
                      "type": "array",
                      "items": {
                        "required": [
                          "name",
                          "url"
                        ],
                        "type": "object",
                        "properties": {
                          "name": {
                            "type": "string"
                          },
                          "url": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {},
          {
            "AgentToken": []
          }
        ]
      }
    },
    "/register": {
      "post": {
        "tags": [],
        "summary": "Register New Agent",
        "description": "Creates a new agent and ties it to an account. \nThe agent symbol must consist of a 3-14 character string, and will be used to represent your agent. This symbol will prefix the symbol of every ship you own. Agent symbols will be cast to all uppercase characters.\n\nThis new agent will be tied to a starting faction of your choice, which determines your starting location, and will be granted an authorization token, a contract with their starting faction, a command ship that can fly across space with advanced capabilities, a small probe ship that can be used for reconnaissance, and 150,000 credits.\n\n> #### Keep your token safe and secure\n>\n> Save your token during the alpha phase. There is no way to regenerate this token without starting a new agent. In the future you will be able to generate and manage your tokens from the SpaceTraders website.\n\nIf you are new to SpaceTraders, It is recommended to register with the COSMIC faction, a faction that is well connected to the rest of the universe. After registering, you should try our interactive [quickstart guide](https://docs.spacetraders.io/quickstart/new-game) which will walk you through basic API requests in just a few minutes.",
        "operationId": "register",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "faction",
                  "symbol"
                ],
                "type": "object",
                "properties": {
                  "faction": {
                    "$ref": "#/components/schemas/FactionSymbol"
                  },
                  "symbol": {
                    "maxLength": 14,
                    "minLength": 3,
                    "type": "string",
                    "description": "Your desired agent symbol. This will be a unique name used to represent your agent, and will be the prefix for your ships.",
                    "example": "BADGER"
                  },
                  "email": {
                    "type": "string",
                    "description": "Your email address. This is used if you reserved your call sign between resets."
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Succesfully registered.",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "data"
                  ],
                  "type": "object",
                  "properties": {
                    "data": {
                      "required": [
                        "agent",
                        "contract",
                        "faction",
                        "ship",
                        "token"
                      ],
                      "type": "object",
                      "properties": {
                        "agent": {
                          "$ref": "#/components/schemas/Agent"
                        },
                        "contract": {
                          "$ref": "#/components/schemas/Contract"
                        },
                        "faction": {
                          "$ref": "#/components/schemas/Faction"
                        },
                        "ship": {
                          "$ref": "#/components/schemas/Ship"
                        },
                        "token": {
                          "type": "string",
                          "description": "A Bearer token for accessing secured API endpoints."
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "security": []
      }
    },
    "/systems": {
      "get": {
        "tags": [
          "Systems"
        ],
        "summary": "List Systems",
        "description": "Return a paginated list of all systems.",
        "operationId": "get-systems",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "What entry offset to request",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "default": 1
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "How many entries to return per page",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maximum": 20,
              "minimum": 1,
              "type": "integer",
              "default": 10
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully listed systems.",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "data",
                    "meta"
                  ],
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/System"
                      }
                    },
                    "meta": {
                      "$ref": "#/components/schemas/Meta"
                    }
                  },
                  "description": ""
                }
              }
            }
          }
        },
        "security": [
          {},
          {
            "AgentToken": []
          }
        ]
      }
    },
    "/systems/{systemSymbol}": {
      "get": {
        "tags": [
          "Systems"
        ],
        "summary": "Get System",
        "description": "Get the details of a system.",
        "operationId": "get-system",
        "responses": {
          "200": {
            "description": "Successfully fetched the system.",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "data"
                  ],
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/System"
                    }
                  },
                  "description": ""
                }
              }
            }
          }
        },
        "security": [
          {},
          {
            "AgentToken": []
          }
        ]
      },
      "parameters": [
        {
          "name": "systemSymbol",
          "in": "path",
          "description": "The system symbol",
          "required": true,
          "style": "simple",
          "explode": false,
          "schema": {
            "type": "string",
            "default": "X1-OE"
          }
        }
      ]
    },
    "/systems/{systemSymbol}/waypoints": {
      "get": {
        "tags": [
          "Systems"
        ],
        "summary": "List Waypoints in System",
        "description": "Return a paginated list of all of the waypoints for a given system.\n\nIf a waypoint is uncharted, it will return the `Uncharted` trait instead of its actual traits.",
        "operationId": "get-system-waypoints",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "What entry offset to request",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "default": 1
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "How many entries to return per page",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maximum": 20,
              "minimum": 1,
              "type": "integer",
              "default": 10
            }
          },
          {
            "name": "type",
            "in": "query",
            "description": "Filter waypoints by type.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "$ref": "#/components/schemas/WaypointType"
            }
          },
          {
            "name": "traits",
            "in": "query",
            "description": "Filter waypoints by one or more traits.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/WaypointTraitSymbol"
                },
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/WaypointTraitSymbol"
                  }
                }
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully fetched all waypoints in the system.",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "data",
                    "meta"
                  ],
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Waypoint"
                      }
                    },
                    "meta": {
                      "$ref": "#/components/schemas/Meta"
                    }
                  },
                  "description": ""
                }
              }
            }
          }
        },
        "security": [
          {},
          {
            "AgentToken": []
          }
        ]
      },
      "parameters": [
        {
          "name": "systemSymbol",
          "in": "path",
          "description": "The system symbol",
          "required": true,
          "style": "simple",
          "explode": false,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/systems/{systemSymbol}/waypoints/{waypointSymbol}": {
      "get": {
        "tags": [
          "Systems"
        ],
        "summary": "Get Waypoint",
        "description": "View the details of a waypoint.\n\nIf the waypoint is uncharted, it will return the 'Uncharted' trait instead of its actual traits.",
        "operationId": "get-waypoint",
        "responses": {
          "200": {
            "description": "Successfully fetched waypoint.",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "data"
                  ],
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/Waypoint"
                    }
                  },
                  "description": ""
                }
              }
            }
          }
        },
        "security": [
          {},
          {
            "AgentToken": []
          }
        ]
      },
      "parameters": [
        {
          "name": "systemSymbol",
          "in": "path",
          "description": "The system symbol",
          "required": true,
          "style": "simple",
          "explode": false,
          "schema": {
            "type": "string"
          }
        },
        {
          "name": "waypointSymbol",
          "in": "path",
          "description": "The waypoint symbol",
          "required": true,
          "style": "simple",
          "explode": false,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/systems/{systemSymbol}/waypoints/{waypointSymbol}/market": {
      "get": {
        "tags": [
          "Systems"
        ],
        "summary": "Get Market",
        "description": "Retrieve imports, exports and exchange data from a marketplace. Requires a waypoint that has the `Marketplace` trait to use.\n\nSend a ship to the waypoint to access trade good prices and recent transactions. Refer to the [Market Overview page](https://docs.spacetraders.io/game-concepts/markets) to gain better a understanding of the market in the game.",
        "operationId": "get-market",
        "responses": {
          "200": {
            "description": "Successfully fetched the market.",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "data"
                  ],
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/Market"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {},
          {
            "AgentToken": []
          }
        ]
      },
      "parameters": [
        {
          "name": "systemSymbol",
          "in": "path",
          "description": "The system symbol",
          "required": true,
          "style": "simple",
          "explode": false,
          "schema": {
            "type": "string"
          }
        },
        {
          "name": "waypointSymbol",
          "in": "path",
          "description": "The waypoint symbol",
          "required": true,
          "style": "simple",
          "explode": false,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/systems/{systemSymbol}/waypoints/{waypointSymbol}/shipyard": {
      "get": {
        "tags": [
          "Systems"
        ],
        "summary": "Get Shipyard",
        "description": "Get the shipyard for a waypoint. Requires a waypoint that has the `Shipyard` trait to use. Send a ship to the waypoint to access data on ships that are currently available for purchase and recent transactions.",
        "operationId": "get-shipyard",
        "responses": {
          "200": {
            "description": "Successfully fetched the shipyard.",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "data"
                  ],
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/Shipyard"
                    }
                  },
                  "description": ""
                }
              }
            }
          }
        },
        "security": [
          {},
          {
            "AgentToken": []
          }
        ]
      },
      "parameters": [
        {
          "name": "systemSymbol",
          "in": "path",
          "description": "The system symbol",
          "required": true,
          "style": "simple",
          "explode": false,
          "schema": {
            "type": "string"
          }
        },
        {
          "name": "waypointSymbol",
          "in": "path",
          "description": "The waypoint symbol",
          "required": true,
          "style": "simple",
          "explode": false,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/systems/{systemSymbol}/waypoints/{waypointSymbol}/jump-gate": {
      "get": {
        "tags": [
          "Systems"
        ],
        "summary": "Get Jump Gate",
        "description": "Get jump gate details for a waypoint. Requires a waypoint of type `JUMP_GATE` to use.\n\nWaypoints connected to this jump gate can be ",
        "operationId": "get-jump-gate",
        "responses": {
          "200": {
            "description": "Successfully fetched jump gate.",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "data"
                  ],
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/JumpGate"
                    }
                  },
                  "description": ""
                }
              }
            }
          }
        },
        "security": [
          {},
          {
            "AgentToken": []
          }
        ]
      },
      "parameters": [
        {
          "name": "systemSymbol",
          "in": "path",
          "description": "The system symbol",
          "required": true,
          "style": "simple",
          "explode": false,
          "schema": {
            "type": "string"
          }
        },
        {
          "name": "waypointSymbol",
          "in": "path",
          "description": "The waypoint symbol",
          "required": true,
          "style": "simple",
          "explode": false,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/systems/{systemSymbol}/waypoints/{waypointSymbol}/construction": {
      "get": {
        "tags": [
          "Systems"
        ],
        "summary": "Get Construction Site",
        "description": "Get construction details for a waypoint. Requires a waypoint with a property of `isUnderConstruction` to be true.",
        "operationId": "get-construction",
        "responses": {
          "200": {
            "description": "Successfully fetched construction site.",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "data"
                  ],
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/Construction"
                    }
                  },
                  "description": ""
                }
              }
            }
          }
        },
        "security": [
          {},
          {
            "AgentToken": []
          }
        ]
      },
      "parameters": [
        {
          "name": "systemSymbol",
          "in": "path",
          "description": "The system symbol",
          "required": true,
          "style": "simple",
          "explode": false,
          "schema": {
            "type": "string"
          }
        },
        {
          "name": "waypointSymbol",
          "in": "path",
          "description": "The waypoint symbol",
          "required": true,
          "style": "simple",
          "explode": false,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/systems/{systemSymbol}/waypoints/{waypointSymbol}/construction/supply": {
      "post": {
        "tags": [
          "Systems"
        ],
        "summary": "Supply Construction Site",
        "description": "Supply a construction site with the specified good. Requires a waypoint with a property of `isUnderConstruction` to be true.\n\nThe good must be in your ship's cargo. The good will be removed from your ship's cargo and added to the construction site's materials.",
        "operationId": "supply-construction",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "shipSymbol",
                  "tradeSymbol",
                  "units"
                ],
                "type": "object",
                "properties": {
                  "shipSymbol": {
                    "type": "string",
                    "description": "Symbol of the ship to use."
                  },
                  "tradeSymbol": {
                    "type": "string",
                    "description": "The symbol of the good to supply."
                  },
                  "units": {
                    "type": "integer",
                    "description": "Amount of units to supply."
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successfully supplied construction site.",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "data"
                  ],
                  "type": "object",
                  "properties": {
                    "data": {
                      "required": [
                        "cargo",
                        "construction"
                      ],
                      "type": "object",
                      "properties": {
                        "construction": {
                          "$ref": "#/components/schemas/Construction"
                        },
                        "cargo": {
                          "$ref": "#/components/schemas/ShipCargo"
                        }
                      }
                    }
                  },
                  "description": ""
                }
              }
            }
          }
        },
        "security": [
          {
            "AgentToken": []
          }
        ]
      },
      "parameters": [
        {
          "name": "systemSymbol",
          "in": "path",
          "description": "The system symbol",
          "required": true,
          "style": "simple",
          "explode": false,
          "schema": {
            "type": "string"
          }
        },
        {
          "name": "waypointSymbol",
          "in": "path",
          "description": "The waypoint symbol",
          "required": true,
          "style": "simple",
          "explode": false,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/factions": {
      "get": {
        "tags": [
          "Factions"
        ],
        "summary": "List Factions",
        "description": "Return a paginated list of all the factions in the game.",
        "operationId": "get-factions",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "What entry offset to request",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "default": 1
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "How many entries to return per page",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maximum": 20,
              "minimum": 1,
              "type": "integer",
              "default": 10
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Succesfully fetched factions.",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "data",
                    "meta"
                  ],
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Faction"
                      }
                    },
                    "meta": {
                      "$ref": "#/components/schemas/Meta"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {},
          {
            "AgentToken": []
          }
        ]
      }
    },
    "/factions/{factionSymbol}": {
      "get": {
        "tags": [
          "Factions"
        ],
        "summary": "Get Faction",
        "description": "View the details of a faction.",
        "operationId": "get-faction",
        "responses": {
          "200": {
            "description": "Successfully fetched a faction.",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "data"
                  ],
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/Faction"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "parameters": [
        {
          "name": "factionSymbol",
          "in": "path",
          "description": "The faction symbol",
          "required": true,
          "style": "simple",
          "explode": false,
          "schema": {
            "type": "string",
            "example": "COSMIC"
          }
        }
      ]
    },
    "/my/agent": {
      "get": {
        "tags": [
          "Agents"
        ],
        "summary": "Get Agent",
        "description": "Fetch your agent's details.",
        "operationId": "get-my-agent",
        "responses": {
          "200": {
            "description": "Successfully fetched agent details.",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "data"
                  ],
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/Agent"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "AgentToken": []
          }
        ]
      }
    },
    "/agents": {
      "get": {
        "tags": [
          "Agents"
        ],
        "summary": "List Agents",
        "description": "Fetch agents details.",
        "operationId": "get-agents",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "What entry offset to request",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "default": 1
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "How many entries to return per page",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maximum": 20,
              "minimum": 1,
              "type": "integer",
              "default": 10
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully fetched agents details.",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "data",
                    "meta"
                  ],
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Agent"
                      }
                    },
                    "meta": {
                      "$ref": "#/components/schemas/Meta"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {},
          {
            "AgentToken": []
          }
        ]
      }
    },
    "/agents/{agentSymbol}": {
      "get": {
        "tags": [
          "Agents"
        ],
        "summary": "Get Public Agent",
        "description": "Fetch agent details.",
        "operationId": "get-agent",
        "parameters": [
          {
            "name": "agentSymbol",
            "in": "path",
            "description": "The agent symbol",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string",
              "default": "FEBA66"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully fetched agent details.",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "data"
                  ],
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/Agent"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {},
          {
            "AgentToken": []
          }
        ]
      }
    },
    "/my/contracts": {
      "get": {
        "tags": [
          "Contracts"
        ],
        "summary": "List Contracts",
        "description": "Return a paginated list of all your contracts.",
        "operationId": "get-contracts",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "What entry offset to request",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "default": 1
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "How many entries to return per page",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maximum": 20,
              "minimum": 1,
              "type": "integer",
              "default": 10
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Succesfully listed contracts.",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "data",
                    "meta"
                  ],
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Contract"
                      }
                    },
                    "meta": {
                      "$ref": "#/components/schemas/Meta"
                    }
                  },
                  "description": ""
                }
              }
            }
          }
        },
        "security": [
          {
            "AgentToken": []
          }
        ]
      }
    },
    "/my/contracts/{contractId}": {
      "get": {
        "tags": [
          "Contracts"
        ],
        "summary": "Get Contract",
        "description": "Get the details of a contract by ID.",
        "operationId": "get-contract",
        "responses": {
          "200": {
            "description": "Successfully fetched contract.",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "data"
                  ],
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/Contract"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "AgentToken": []
          }
        ]
      },
      "parameters": [
        {
          "name": "contractId",
          "in": "path",
          "description": "The contract ID",
          "required": true,
          "style": "simple",
          "explode": false,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/my/contracts/{contractId}/accept": {
      "post": {
        "tags": [
          "Contracts"
        ],
        "summary": "Accept Contract",
        "description": "Accept a contract by ID. \n\nYou can only accept contracts that were offered to you, were not accepted yet, and whose deadlines has not passed yet.",
        "operationId": "accept-contract",
        "responses": {
          "200": {
            "description": "Succesfully accepted contract.",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "data"
                  ],
                  "type": "object",
                  "properties": {
                    "data": {
                      "required": [
                        "agent",
                        "contract"
                      ],
                      "type": "object",
                      "properties": {
                        "agent": {
                          "$ref": "#/components/schemas/Agent"
                        },
                        "contract": {
                          "$ref": "#/components/schemas/Contract"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "AgentToken": []
          }
        ]
      },
      "parameters": [
        {
          "name": "contractId",
          "in": "path",
          "description": "The contract ID to accept.",
          "required": true,
          "style": "simple",
          "explode": false,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/my/contracts/{contractId}/deliver": {
      "post": {
        "tags": [
          "Contracts"
        ],
        "summary": "Deliver Cargo to Contract",
        "description": "Deliver cargo to a contract.\n\nIn order to use this API, a ship must be at the delivery location (denoted in the delivery terms as `destinationSymbol` of a contract) and must have a number of units of a good required by this contract in its cargo.\n\nCargo that was delivered will be removed from the ship's cargo.",
        "operationId": "deliver-contract",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "shipSymbol",
                  "tradeSymbol",
                  "units"
                ],
                "type": "object",
                "properties": {
                  "shipSymbol": {
                    "type": "string",
                    "description": "Symbol of a ship located in the destination to deliver a contract and that has a good to deliver in its cargo."
                  },
                  "tradeSymbol": {
                    "type": "string",
                    "description": "The symbol of the good to deliver."
                  },
                  "units": {
                    "type": "integer",
                    "description": "Amount of units to deliver."
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully delivered cargo to contract.",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "data"
                  ],
                  "type": "object",
                  "properties": {
                    "data": {
                      "required": [
                        "cargo",
                        "contract"
                      ],
                      "type": "object",
                      "properties": {
                        "contract": {
                          "$ref": "#/components/schemas/Contract"
                        },
                        "cargo": {
                          "$ref": "#/components/schemas/ShipCargo"
                        }
                      }
                    }
                  },
                  "description": ""
                }
              }
            }
          }
        },
        "security": [
          {
            "AgentToken": []
          }
        ]
      },
      "parameters": [
        {
          "name": "contractId",
          "in": "path",
          "description": "The ID of the contract.",
          "required": true,
          "style": "simple",
          "explode": false,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/my/contracts/{contractId}/fulfill": {
      "post": {
        "tags": [
          "Contracts"
        ],
        "summary": "Fulfill Contract",
        "description": "Fulfill a contract. Can only be used on contracts that have all of their delivery terms fulfilled.",
        "operationId": "fulfill-contract",
        "responses": {
          "200": {
            "description": "Successfully fulfilled a contract.",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "data"
                  ],
                  "type": "object",
                  "properties": {
                    "data": {
                      "required": [
                        "agent",
                        "contract"
                      ],
                      "type": "object",
                      "properties": {
                        "agent": {
                          "$ref": "#/components/schemas/Agent"
                        },
                        "contract": {
                          "$ref": "#/components/schemas/Contract"
                        }
                      }
                    }
                  },
                  "description": ""
                }
              }
            }
          }
        },
        "security": [
          {
            "AgentToken": []
          }
        ]
      },
      "parameters": [
        {
          "name": "contractId",
          "in": "path",
          "description": "The ID of the contract to fulfill.",
          "required": true,
          "style": "simple",
          "explode": false,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/my/ships": {
      "get": {
        "tags": [
          "Fleet"
        ],
        "summary": "List Ships",
        "description": "Return a paginated list of all of ships under your agent's ownership.",
        "operationId": "get-my-ships",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "What entry offset to request",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "default": 1
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "How many entries to return per page",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maximum": 20,
              "minimum": 1,
              "type": "integer",
              "default": 10
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Succesfully listed ships.",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "data",
                    "meta"
                  ],
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Ship"
                      }
                    },
                    "meta": {
                      "$ref": "#/components/schemas/Meta"
                    }
                  },
                  "description": ""
                }
              }
            }
          }
        },
        "security": [
          {
            "AgentToken": []
          }
        ]
      },
      "post": {
        "tags": [
          "Fleet"
        ],
        "summary": "Purchase Ship",
        "description": "Purchase a ship from a Shipyard. In order to use this function, a ship under your agent's ownership must be in a waypoint that has the `Shipyard` trait, and the Shipyard must sell the type of the desired ship.\n\nShipyards typically offer ship types, which are predefined templates of ships that have dedicated roles. A template comes with a preset of an engine, a reactor, and a frame. It may also include a few modules and mounts.",
        "operationId": "purchase-ship",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "shipType",
                  "waypointSymbol"
                ],
                "type": "object",
                "properties": {
                  "shipType": {
                    "$ref": "#/components/schemas/ShipType"
                  },
                  "waypointSymbol": {
                    "type": "string",
                    "description": "The symbol of the waypoint you want to purchase the ship at."
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Purchased ship successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "data"
                  ],
                  "type": "object",
                  "properties": {
                    "data": {
                      "required": [
                        "agent",
                        "ship",
                        "transaction"
                      ],
                      "type": "object",
                      "properties": {
                        "agent": {
                          "$ref": "#/components/schemas/Agent"
                        },
                        "ship": {
                          "$ref": "#/components/schemas/Ship"
                        },
                        "transaction": {
                          "$ref": "#/components/schemas/ShipyardTransaction"
                        }
                      }
                    }
                  },
                  "description": ""
                }
              }
            }
          }
        },
        "security": [
          {
            "AgentToken": []
          }
        ]
      }
    },
    "/my/ships/{shipSymbol}": {
      "get": {
        "tags": [
          "Fleet"
        ],
        "summary": "Get Ship",
        "description": "Retrieve the details of a ship under your agent's ownership.",
        "operationId": "get-my-ship",
        "responses": {
          "200": {
            "description": "Successfully fetched ship.",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "data"
                  ],
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/Ship"
                    }
                  },
                  "description": ""
                }
              }
            }
          }
        },
        "security": [
          {
            "AgentToken": []
          }
        ]
      },
      "parameters": [
        {
          "name": "shipSymbol",
          "in": "path",
          "description": "The symbol of the ship.",
          "required": true,
          "style": "simple",
          "explode": false,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/my/ships/{shipSymbol}/cargo": {
      "get": {
        "tags": [
          "Fleet"
        ],
        "summary": "Get Ship Cargo",
        "description": "Retrieve the cargo of a ship under your agent's ownership.",
        "operationId": "get-my-ship-cargo",
        "responses": {
          "200": {
            "description": "Successfully fetched ship's cargo.",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "data"
                  ],
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/ShipCargo"
                    }
                  },
                  "description": ""
                }
              }
            }
          }
        },
        "security": [
          {
            "AgentToken": []
          }
        ]
      },
      "parameters": [
        {
          "name": "shipSymbol",
          "in": "path",
          "description": "The symbol of the ship.",
          "required": true,
          "style": "simple",
          "explode": false,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/my/ships/{shipSymbol}/orbit": {
      "post": {
        "tags": [
          "Fleet"
        ],
        "summary": "Orbit Ship",
        "description": "Attempt to move your ship into orbit at its current location. The request will only succeed if your ship is capable of moving into orbit at the time of the request.\n\nOrbiting ships are able to do actions that require the ship to be above surface such as navigating or extracting, but cannot access elements in their current waypoint, such as the market or a shipyard.\n\nThe endpoint is idempotent - successive calls will succeed even if the ship is already in orbit.",
        "operationId": "orbit-ship",
        "responses": {
          "200": {
            "description": "The ship has successfully moved into orbit at its current location.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Orbit Ship 200 Response",
                  "required": [
                    "data"
                  ],
                  "type": "object",
                  "properties": {
                    "data": {
                      "required": [
                        "nav"
                      ],
                      "type": "object",
                      "properties": {
                        "nav": {
                          "$ref": "#/components/schemas/ShipNav"
                        }
                      }
                    }
                  },
                  "description": ""
                }
              }
            }
          }
        },
        "security": [
          {
            "AgentToken": []
          }
        ]
      },
      "parameters": [
        {
          "name": "shipSymbol",
          "in": "path",
          "description": "The symbol of the ship.",
          "required": true,
          "style": "simple",
          "explode": false,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/my/ships/{shipSymbol}/refine": {
      "post": {
        "tags": [
          "Fleet"
        ],
        "summary": "Ship Refine",
        "description": "Attempt to refine the raw materials on your ship. The request will only succeed if your ship is capable of refining at the time of the request. In order to be able to refine, a ship must have goods that can be refined and have installed a `Refinery` module that can refine it.\n\nWhen refining, 30 basic goods will be converted into 10 processed goods.",
        "operationId": "ship-refine",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "produce"
                ],
                "type": "object",
                "properties": {
                  "produce": {
                    "type": "string",
                    "description": "The type of good to produce out of the refining process.",
                    "enum": [
                      "IRON",
                      "COPPER",
                      "SILVER",
                      "GOLD",
                      "ALUMINUM",
                      "PLATINUM",
                      "URANITE",
                      "MERITIUM",
                      "FUEL"
                    ]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The ship has successfully refined goods.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Ship Refine 201 Response",
                  "required": [
                    "data"
                  ],
                  "type": "object",
                  "properties": {
                    "data": {
                      "required": [
                        "cargo",
                        "consumed",
                        "cooldown",
                        "produced"
                      ],
                      "type": "object",
                      "properties": {
                        "cargo": {
                          "$ref": "#/components/schemas/ShipCargo"
                        },
                        "cooldown": {
                          "$ref": "#/components/schemas/Cooldown"
                        },
                        "produced": {
                          "type": "array",
                          "description": "Goods that were produced by this refining process.",
                          "items": {
                            "required": [
                              "tradeSymbol",
                              "units"
                            ],
                            "type": "object",
                            "properties": {
                              "tradeSymbol": {
                                "type": "string",
                                "description": "Symbol of the good."
                              },
                              "units": {
                                "type": "integer",
                                "description": "Amount of units of the good."
                              }
                            }
                          }
                        },
                        "consumed": {
                          "type": "array",
                          "description": "Goods that were consumed during this refining process.",
                          "items": {
                            "required": [
                              "tradeSymbol",
                              "units"
                            ],
                            "type": "object",
                            "properties": {
                              "tradeSymbol": {
                                "type": "string",
                                "description": "Symbol of the good."
                              },
                              "units": {
                                "type": "integer",
                                "description": "Amount of units of the good."
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "AgentToken": []
          }
        ]
      },
      "parameters": [
        {
          "name": "shipSymbol",
          "in": "path",
          "description": "The symbol of the ship.",
          "required": true,
          "style": "simple",
          "explode": false,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/my/ships/{shipSymbol}/chart": {
      "post": {
        "tags": [
          "Fleet"
        ],
        "summary": "Create Chart",
        "description": "Command a ship to chart the waypoint at its current location.\n\nMost waypoints in the universe are uncharted by default. These waypoints have their traits hidden until they have been charted by a ship.\n\nCharting a waypoint will record your agent as the one who created the chart, and all other agents would also be able to see the waypoint's traits.",
        "operationId": "create-chart",
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "data"
                  ],
                  "type": "object",
                  "properties": {
                    "data": {
                      "required": [
                        "chart",
                        "waypoint"
                      ],
                      "type": "object",
                      "properties": {
                        "chart": {
                          "$ref": "#/components/schemas/Chart"
                        },
                        "waypoint": {
                          "$ref": "#/components/schemas/Waypoint"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "AgentToken": []
          }
        ]
      },
      "parameters": [
        {
          "name": "shipSymbol",
          "in": "path",
          "description": "The symbol of the ship.",
          "required": true,
          "style": "simple",
          "explode": false,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/my/ships/{shipSymbol}/cooldown": {
      "get": {
        "tags": [
          "Fleet"
        ],
        "summary": "Get Ship Cooldown",
        "description": "Retrieve the details of your ship's reactor cooldown. Some actions such as activating your jump drive, scanning, or extracting resources taxes your reactor and results in a cooldown.\n\nYour ship cannot perform additional actions until your cooldown has expired. The duration of your cooldown is relative to the power consumption of the related modules or mounts for the action taken.\n\nResponse returns a 204 status code (no-content) when the ship has no cooldown.",
        "operationId": "get-ship-cooldown",
        "responses": {
          "200": {
            "description": "Succesfully fetched ship's cooldown.",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "data"
                  ],
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/Cooldown"
                    }
                  },
                  "description": ""
                }
              }
            }
          },
          "204": {
            "description": "No cooldown."
          }
        },
        "security": [
          {
            "AgentToken": []
          }
        ]
      },
      "parameters": [
        {
          "name": "shipSymbol",
          "in": "path",
          "description": "The symbol of the ship.",
          "required": true,
          "style": "simple",
          "explode": false,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/my/ships/{shipSymbol}/dock": {
      "post": {
        "tags": [
          "Fleet"
        ],
        "summary": "Dock Ship",
        "description": "Attempt to dock your ship at its current location. Docking will only succeed if your ship is capable of docking at the time of the request.\n\nDocked ships can access elements in their current location, such as the market or a shipyard, but cannot do actions that require the ship to be above surface such as navigating or extracting.\n\nThe endpoint is idempotent - successive calls will succeed even if the ship is already docked.",
        "operationId": "dock-ship",
        "responses": {
          "200": {
            "description": "The ship has successfully docked at its current location.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Dock Ship 200 Response",
                  "required": [
                    "data"
                  ],
                  "type": "object",
                  "properties": {
                    "data": {
                      "required": [
                        "nav"
                      ],
                      "type": "object",
                      "properties": {
                        "nav": {
                          "$ref": "#/components/schemas/ShipNav"
                        }
                      }
                    }
                  },
                  "description": ""
                }
              }
            }
          }
        },
        "security": [
          {
            "AgentToken": []
          }
        ]
      },
      "parameters": [
        {
          "name": "shipSymbol",
          "in": "path",
          "description": "The symbol of the ship.",
          "required": true,
          "style": "simple",
          "explode": false,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/my/ships/{shipSymbol}/survey": {
      "post": {
        "tags": [
          "Fleet"
        ],
        "summary": "Create Survey",
        "description": "Create surveys on a waypoint that can be extracted such as asteroid fields. A survey focuses on specific types of deposits from the extracted location. When ships extract using this survey, they are guaranteed to procure a high amount of one of the goods in the survey.\n\nIn order to use a survey, send the entire survey details in the body of the extract request.\n\nEach survey may have multiple deposits, and if a symbol shows up more than once, that indicates a higher chance of extracting that resource.\n\nYour ship will enter a cooldown after surveying in which it is unable to perform certain actions. Surveys will eventually expire after a period of time or will be exhausted after being extracted several times based on the survey's size. Multiple ships can use the same survey for extraction.\n\nA ship must have the `Surveyor` mount installed in order to use this function.",
        "operationId": "create-survey",
        "responses": {
          "201": {
            "description": "Surveys has been created.",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "data"
                  ],
                  "type": "object",
                  "properties": {
                    "data": {
                      "required": [
                        "cooldown",
                        "surveys"
                      ],
                      "type": "object",
                      "properties": {
                        "cooldown": {
                          "$ref": "#/components/schemas/Cooldown"
                        },
                        "surveys": {
                          "type": "array",
                          "description": "Surveys created by this action.",
                          "items": {
                            "$ref": "#/components/schemas/Survey"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "AgentToken": []
          }
        ]
      },
      "parameters": [
        {
          "name": "shipSymbol",
          "in": "path",
          "description": "The symbol of the ship.",
          "required": true,
          "style": "simple",
          "explode": false,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/my/ships/{shipSymbol}/extract": {
      "post": {
        "tags": [
          "Fleet"
        ],
        "summary": "Extract Resources",
        "description": "Extract resources from a waypoint that can be extracted, such as asteroid fields, into your ship. Send an optional survey as the payload to target specific yields.\n\nThe ship must be in orbit to be able to extract and must have mining equipments installed that can extract goods, such as the `Gas Siphon` mount for gas-based goods or `Mining Laser` mount for ore-based goods.\n\nThe survey property is now deprecated. See the `extract/survey` endpoint for more details.",
        "operationId": "extract-resources",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "survey": {
                    "$ref": "#/components/schemas/Survey"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Extracted successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "data"
                  ],
                  "type": "object",
                  "properties": {
                    "data": {
                      "required": [
                        "cargo",
                        "cooldown",
                        "events",
                        "extraction"
                      ],
                      "type": "object",
                      "properties": {
                        "cooldown": {
                          "$ref": "#/components/schemas/Cooldown"
                        },
                        "extraction": {
                          "$ref": "#/components/schemas/Extraction"
                        },
                        "cargo": {
                          "$ref": "#/components/schemas/ShipCargo"
                        },
                        "events": {
                          "type": "array",
                          "items": {
                            "oneOf": [
                              {
                                "$ref": "#/components/schemas/ShipConditionEvent"
                              }
                            ]
                          }
                        }
                      }
                    }
                  },
                  "description": ""
                }
              }
            }
          }
        },
        "security": [
          {
            "AgentToken": []
          }
        ]
      },
      "parameters": [
        {
          "name": "shipSymbol",
          "in": "path",
          "description": "The ship symbol.",
          "required": true,
          "style": "simple",
          "explode": false,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/my/ships/{shipSymbol}/siphon": {
      "post": {
        "tags": [
          "Fleet"
        ],
        "summary": "Siphon Resources",
        "description": "Siphon gases, such as hydrocarbon, from gas giants.\n\nThe ship must be in orbit to be able to siphon and must have siphon mounts and a gas processor installed.",
        "operationId": "siphon-resources",
        "responses": {
          "201": {
            "description": "Siphon successful.",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "data"
                  ],
                  "type": "object",
                  "properties": {
                    "data": {
                      "required": [
                        "cargo",
                        "cooldown",
                        "events",
                        "siphon"
                      ],
                      "type": "object",
                      "properties": {
                        "cooldown": {
                          "$ref": "#/components/schemas/Cooldown"
                        },
                        "siphon": {
                          "$ref": "#/components/schemas/Siphon"
                        },
                        "cargo": {
                          "$ref": "#/components/schemas/ShipCargo"
                        },
                        "events": {
                          "type": "array",
                          "items": {
                            "oneOf": [
                              {
                                "$ref": "#/components/schemas/ShipConditionEvent"
                              }
                            ]
                          }
                        }
                      }
                    }
                  },
                  "description": ""
                }
              }
            }
          }
        },
        "security": [
          {
            "AgentToken": []
          }
        ]
      },
      "parameters": [
        {
          "name": "shipSymbol",
          "in": "path",
          "description": "The ship symbol.",
          "required": true,
          "style": "simple",
          "explode": false,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/my/ships/{shipSymbol}/extract/survey": {
      "post": {
        "tags": [
          "Fleet"
        ],
        "summary": "Extract Resources with Survey",
        "description": "Use a survey when extracting resources from a waypoint. This endpoint requires a survey as the payload, which allows your ship to extract specific yields.\n\nSend the full survey object as the payload which will be validated according to the signature. If the signature is invalid, or any properties of the survey are changed, the request will fail.",
        "operationId": "extract-resources-with-survey",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Survey"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Extracted successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "data"
                  ],
                  "type": "object",
                  "properties": {
                    "data": {
                      "required": [
                        "cargo",
                        "cooldown",
                        "events",
                        "extraction"
                      ],
                      "type": "object",
                      "properties": {
                        "cooldown": {
                          "$ref": "#/components/schemas/Cooldown"
                        },
                        "extraction": {
                          "$ref": "#/components/schemas/Extraction"
                        },
                        "cargo": {
                          "$ref": "#/components/schemas/ShipCargo"
                        },
                        "events": {
                          "type": "array",
                          "items": {
                            "oneOf": [
                              {
                                "$ref": "#/components/schemas/ShipConditionEvent"
                              }
                            ]
                          }
                        }
                      }
                    }
                  },
                  "description": ""
                }
              }
            }
          }
        },
        "security": [
          {
            "AgentToken": []
          }
        ]
      },
      "parameters": [
        {
          "name": "shipSymbol",
          "in": "path",
          "description": "The ship symbol.",
          "required": true,
          "style": "simple",
          "explode": false,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/my/ships/{shipSymbol}/jettison": {
      "post": {
        "tags": [
          "Fleet"
        ],
        "summary": "Jettison Cargo",
        "description": "Jettison cargo from your ship's cargo hold.",
        "operationId": "jettison",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "symbol",
                  "units"
                ],
                "type": "object",
                "properties": {
                  "symbol": {
                    "$ref": "#/components/schemas/TradeSymbol"
                  },
                  "units": {
                    "minimum": 1,
                    "type": "integer",
                    "description": "Amount of units to jettison of this good."
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Jettison successful.",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "data"
                  ],
                  "type": "object",
                  "properties": {
                    "data": {
                      "required": [
                        "cargo"
                      ],
                      "type": "object",
                      "properties": {
                        "cargo": {
                          "$ref": "#/components/schemas/ShipCargo"
                        }
                      }
                    }
                  },
                  "description": ""
                }
              }
            }
          }
        },
        "security": [
          {
            "AgentToken": []
          }
        ]
      },
      "parameters": [
        {
          "name": "shipSymbol",
          "in": "path",
          "description": "The ship symbol.",
          "required": true,
          "style": "simple",
          "explode": false,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/my/ships/{shipSymbol}/jump": {
      "post": {
        "tags": [
          "Fleet"
        ],
        "summary": "Jump Ship",
        "description": "Jump your ship instantly to a target connected waypoint. The ship must be in orbit to execute a jump.\n\nA unit of antimatter is purchased and consumed from the market when jumping. The price of antimatter is determined by the market and is subject to change. A ship can only jump to connected waypoints",
        "operationId": "jump-ship",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "waypointSymbol"
                ],
                "type": "object",
                "properties": {
                  "waypointSymbol": {
                    "type": "string",
                    "description": "The symbol of the waypoint to jump to. The destination must be a connected waypoint."
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Jump successful.",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "data"
                  ],
                  "type": "object",
                  "properties": {
                    "data": {
                      "required": [
                        "agent",
                        "cooldown",
                        "nav",
                        "transaction"
                      ],
                      "type": "object",
                      "properties": {
                        "nav": {
                          "$ref": "#/components/schemas/ShipNav"
                        },
                        "cooldown": {
                          "$ref": "#/components/schemas/Cooldown"
                        },
                        "transaction": {
                          "$ref": "#/components/schemas/MarketTransaction"
                        },
                        "agent": {
                          "$ref": "#/components/schemas/Agent"
                        }
                      }
                    }
                  },
                  "description": ""
                }
              }
            }
          }
        },
        "security": [
          {
            "AgentToken": []
          }
        ]
      },
      "parameters": [
        {
          "name": "shipSymbol",
          "in": "path",
          "description": "The ship symbol.",
          "required": true,
          "style": "simple",
          "explode": false,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/my/ships/{shipSymbol}/navigate": {
      "post": {
        "tags": [
          "Fleet"
        ],
        "summary": "Navigate Ship",
        "description": "Navigate to a target destination. The ship must be in orbit to use this function. The destination waypoint must be within the same system as the ship's current location. Navigating will consume the necessary fuel from the ship's manifest based on the distance to the target waypoint.\n\nThe returned response will detail the route information including the expected time of arrival. Most ship actions are unavailable until the ship has arrived at it's destination.\n\nTo travel between systems, see the ship's Warp or Jump actions.",
        "operationId": "navigate-ship",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "waypointSymbol"
                ],
                "type": "object",
                "properties": {
                  "waypointSymbol": {
                    "type": "string",
                    "description": "The target destination."
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The successful transit information including the route details and changes to ship fuel. The route includes the expected time of arrival.",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "data"
                  ],
                  "type": "object",
                  "properties": {
                    "data": {
                      "required": [
                        "events",
                        "fuel",
                        "nav"
                      ],
                      "type": "object",
                      "properties": {
                        "fuel": {
                          "$ref": "#/components/schemas/ShipFuel"
                        },
                        "nav": {
                          "$ref": "#/components/schemas/ShipNav"
                        },
                        "events": {
                          "type": "array",
                          "items": {
                            "oneOf": [
                              {
                                "$ref": "#/components/schemas/ShipConditionEvent"
                              }
                            ]
                          }
                        }
                      }
                    }
                  },
                  "description": ""
                }
              }
            }
          }
        },
        "security": [
          {
            "AgentToken": []
          }
        ]
      },
      "parameters": [
        {
          "name": "shipSymbol",
          "in": "path",
          "description": "The ship symbol.",
          "required": true,
          "style": "simple",
          "explode": false,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/my/ships/{shipSymbol}/nav": {
      "get": {
        "tags": [
          "Fleet"
        ],
        "summary": "Get Ship Nav",
        "description": "Get the current nav status of a ship.",
        "operationId": "get-ship-nav",
        "responses": {
          "200": {
            "description": "The current nav status of the ship.",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "data"
                  ],
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/ShipNav"
                    }
                  },
                  "description": ""
                }
              }
            }
          }
        },
        "security": [
          {
            "AgentToken": []
          }
        ]
      },
      "patch": {
        "tags": [
          "Fleet"
        ],
        "summary": "Patch Ship Nav",
        "description": "Update the nav configuration of a ship.\n\nCurrently only supports configuring the Flight Mode of the ship, which affects its speed and fuel consumption.",
        "operationId": "patch-ship-nav",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "flightMode": {
                    "$ref": "#/components/schemas/ShipNavFlightMode"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The updated nav data of the ship.",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "data"
                  ],
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/ShipNav"
                    }
                  },
                  "description": ""
                }
              }
            }
          }
        },
        "security": [
          {
            "AgentToken": []
          }
        ]
      },
      "parameters": [
        {
          "name": "shipSymbol",
          "in": "path",
          "description": "The ship symbol.",
          "required": true,
          "style": "simple",
          "explode": false,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/my/ships/{shipSymbol}/warp": {
      "post": {
        "tags": [
          "Fleet"
        ],
        "summary": "Warp Ship",
        "description": "Warp your ship to a target destination in another system. The ship must be in orbit to use this function and must have the `Warp Drive` module installed. Warping will consume the necessary fuel from the ship's manifest.\n\nThe returned response will detail the route information including the expected time of arrival. Most ship actions are unavailable until the ship has arrived at its destination.",
        "operationId": "warp-ship",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "waypointSymbol"
                ],
                "type": "object",
                "properties": {
                  "waypointSymbol": {
                    "type": "string",
                    "description": "The target destination."
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The successful transit information including the route details and changes to ship fuel. The route includes the expected time of arrival.",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "data"
                  ],
                  "type": "object",
                  "properties": {
                    "data": {
                      "required": [
                        "fuel",
                        "nav"
                      ],
                      "type": "object",
                      "properties": {
                        "fuel": {
                          "$ref": "#/components/schemas/ShipFuel"
                        },
                        "nav": {
                          "$ref": "#/components/schemas/ShipNav"
                        }
                      }
                    }
                  },
                  "description": ""
                }
              }
            }
          }
        },
        "security": [
          {
            "AgentToken": []
          }
        ]
      },
      "parameters": [
        {
          "name": "shipSymbol",
          "in": "path",
          "description": "The ship symbol.",
          "required": true,
          "style": "simple",
          "explode": false,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/my/ships/{shipSymbol}/sell": {
      "post": {
        "tags": [
          "Fleet"
        ],
        "summary": "Sell Cargo",
        "description": "Sell cargo in your ship to a market that trades this cargo. The ship must be docked in a waypoint that has the `Marketplace` trait in order to use this function.",
        "operationId": "sell-cargo",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "title": "SellCargoRequest",
                "required": [
                  "symbol",
                  "units"
                ],
                "type": "object",
                "properties": {
                  "symbol": {
                    "$ref": "#/components/schemas/TradeSymbol"
                  },
                  "units": {
                    "type": "integer",
                    "description": "Amounts of units to sell of the selected good."
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Cargo was successfully sold.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Sell Cargo 201 Response",
                  "required": [
                    "data"
                  ],
                  "type": "object",
                  "properties": {
                    "data": {
                      "required": [
                        "agent",
                        "cargo",
                        "transaction"
                      ],
                      "type": "object",
                      "properties": {
                        "agent": {
                          "$ref": "#/components/schemas/Agent"
                        },
                        "cargo": {
                          "$ref": "#/components/schemas/ShipCargo"
                        },
                        "transaction": {
                          "$ref": "#/components/schemas/MarketTransaction"
                        }
                      }
                    }
                  },
                  "description": ""
                }
              }
            }
          }
        },
        "security": [
          {
            "AgentToken": []
          }
        ]
      },
      "parameters": [
        {
          "name": "shipSymbol",
          "in": "path",
          "description": "Symbol of a ship.",
          "required": true,
          "style": "simple",
          "explode": false,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/my/ships/{shipSymbol}/scan/systems": {
      "post": {
        "tags": [
          "Fleet"
        ],
        "summary": "Scan Systems",
        "description": "Scan for nearby systems, retrieving information on the systems' distance from the ship and their waypoints. Requires a ship to have the `Sensor Array` mount installed to use.\n\nThe ship will enter a cooldown after using this function, during which it cannot execute certain actions.",
        "operationId": "create-ship-system-scan",
        "responses": {
          "201": {
            "description": "Successfully scanned for nearby systems.",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "data"
                  ],
                  "type": "object",
                  "properties": {
                    "data": {
                      "required": [
                        "cooldown",
                        "systems"
                      ],
                      "type": "object",
                      "properties": {
                        "cooldown": {
                          "$ref": "#/components/schemas/Cooldown"
                        },
                        "systems": {
                          "type": "array",
                          "description": "List of scanned systems.",
                          "items": {
                            "$ref": "#/components/schemas/ScannedSystem"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "AgentToken": []
          }
        ]
      },
      "parameters": [
        {
          "name": "shipSymbol",
          "in": "path",
          "description": "The ship symbol.",
          "required": true,
          "style": "simple",
          "explode": false,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/my/ships/{shipSymbol}/scan/waypoints": {
      "post": {
        "tags": [
          "Fleet"
        ],
        "summary": "Scan Waypoints",
        "description": "Scan for nearby waypoints, retrieving detailed information on each waypoint in range. Scanning uncharted waypoints will allow you to ignore their uncharted state and will list the waypoints' traits.\n\nRequires a ship to have the `Sensor Array` mount installed to use.\n\nThe ship will enter a cooldown after using this function, during which it cannot execute certain actions.",
        "operationId": "create-ship-waypoint-scan",
        "responses": {
          "201": {
            "description": "Successfully scanned for nearby waypoints.",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "data"
                  ],
                  "type": "object",
                  "properties": {
                    "data": {
                      "required": [
                        "cooldown",
                        "waypoints"
                      ],
                      "type": "object",
                      "properties": {
                        "cooldown": {
                          "$ref": "#/components/schemas/Cooldown"
                        },
                        "waypoints": {
                          "type": "array",
                          "description": "List of scanned waypoints.",
                          "items": {
                            "$ref": "#/components/schemas/ScannedWaypoint"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "AgentToken": []
          }
        ]
      },
      "parameters": [
        {
          "name": "shipSymbol",
          "in": "path",
          "description": "The ship symbol.",
          "required": true,
          "style": "simple",
          "explode": false,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/my/ships/{shipSymbol}/scan/ships": {
      "post": {
        "tags": [
          "Fleet"
        ],
        "summary": "Scan Ships",
        "description": "Scan for nearby ships, retrieving information for all ships in range.\n\nRequires a ship to have the `Sensor Array` mount installed to use.\n\nThe ship will enter a cooldown after using this function, during which it cannot execute certain actions.",
        "operationId": "create-ship-ship-scan",
        "responses": {
          "201": {
            "description": "Successfully scanned for nearby ships.",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "data"
                  ],
                  "type": "object",
                  "properties": {
                    "data": {
                      "required": [
                        "cooldown",
                        "ships"
                      ],
                      "type": "object",
                      "properties": {
                        "cooldown": {
                          "$ref": "#/components/schemas/Cooldown"
                        },
                        "ships": {
                          "type": "array",
                          "description": "List of scanned ships.",
                          "items": {
                            "$ref": "#/components/schemas/ScannedShip"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "AgentToken": []
          }
        ]
      },
      "parameters": [
        {
          "name": "shipSymbol",
          "in": "path",
          "description": "The ship symbol.",
          "required": true,
          "style": "simple",
          "explode": false,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/my/ships/{shipSymbol}/refuel": {
      "post": {
        "tags": [
          "Fleet"
        ],
        "summary": "Refuel Ship",
        "description": "Refuel your ship by buying fuel from the local market.\n\nRequires the ship to be docked in a waypoint that has the `Marketplace` trait, and the market must be selling fuel in order to refuel.\n\nEach fuel bought from the market replenishes 100 units in your ship's fuel.\n\nShips will always be refuel to their frame's maximum fuel capacity when using this action.",
        "operationId": "refuel-ship",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "units": {
                    "minimum": 1,
                    "type": "integer",
                    "description": "The amount of fuel to fill in the ship's tanks. When not specified, the ship will be refueled to its maximum fuel capacity. If the amount specified is greater than the ship's remaining capacity, the ship will only be refueled to its maximum fuel capacity. The amount specified is not in market units but in ship fuel units.",
                    "example": 100
                  },
                  "fromCargo": {
                    "type": "boolean",
                    "description": "Wether to use the FUEL thats in your cargo or not. Default: false",
                    "example": false
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Refueled successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "data"
                  ],
                  "type": "object",
                  "properties": {
                    "data": {
                      "required": [
                        "agent",
                        "fuel",
                        "transaction"
                      ],
                      "type": "object",
                      "properties": {
                        "agent": {
                          "$ref": "#/components/schemas/Agent"
                        },
                        "fuel": {
                          "$ref": "#/components/schemas/ShipFuel"
                        },
                        "transaction": {
                          "$ref": "#/components/schemas/MarketTransaction"
                        }
                      }
                    }
                  },
                  "description": ""
                }
              }
            }
          }
        },
        "security": [
          {
            "AgentToken": []
          }
        ]
      },
      "parameters": [
        {
          "name": "shipSymbol",
          "in": "path",
          "description": "The ship symbol.",
          "required": true,
          "style": "simple",
          "explode": false,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/my/ships/{shipSymbol}/purchase": {
      "post": {
        "tags": [
          "Fleet"
        ],
        "summary": "Purchase Cargo",
        "description": "Purchase cargo from a market.\n\nThe ship must be docked in a waypoint that has `Marketplace` trait, and the market must be selling a good to be able to purchase it.\n\nThe maximum amount of units of a good that can be purchased in each transaction are denoted by the `tradeVolume` value of the good, which can be viewed by using the Get Market action.\n\nPurchased goods are added to the ship's cargo hold.",
        "operationId": "purchase-cargo",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "title": "Purchase Cargo Request",
                "required": [
                  "symbol",
                  "units"
                ],
                "type": "object",
                "properties": {
                  "symbol": {
                    "$ref": "#/components/schemas/TradeSymbol"
                  },
                  "units": {
                    "type": "integer",
                    "description": "Amounts of units to purchase."
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Purchased goods successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Purchase Cargo 201 Response",
                  "required": [
                    "data"
                  ],
                  "type": "object",
                  "properties": {
                    "data": {
                      "required": [
                        "agent",
                        "cargo",
                        "transaction"
                      ],
                      "type": "object",
                      "properties": {
                        "agent": {
                          "$ref": "#/components/schemas/Agent"
                        },
                        "cargo": {
                          "$ref": "#/components/schemas/ShipCargo"
                        },
                        "transaction": {
                          "$ref": "#/components/schemas/MarketTransaction"
                        }
                      }
                    }
                  },
                  "description": ""
                }
              }
            }
          }
        },
        "security": [
          {
            "AgentToken": []
          }
        ]
      },
      "parameters": [
        {
          "name": "shipSymbol",
          "in": "path",
          "description": "The ship's symbol.",
          "required": true,
          "style": "simple",
          "explode": false,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/my/ships/{shipSymbol}/transfer": {
      "post": {
        "tags": [
          "Fleet"
        ],
        "summary": "Transfer Cargo",
        "description": "Transfer cargo between ships.\n\nThe receiving ship must be in the same waypoint as the transferring ship, and it must able to hold the additional cargo after the transfer is complete. Both ships also must be in the same state, either both are docked or both are orbiting.\n\nThe response body's cargo shows the cargo of the transferring ship after the transfer is complete.",
        "operationId": "transfer-cargo",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "title": "Transfer Cargo Request",
                "required": [
                  "shipSymbol",
                  "tradeSymbol",
                  "units"
                ],
                "type": "object",
                "properties": {
                  "tradeSymbol": {
                    "$ref": "#/components/schemas/TradeSymbol"
                  },
                  "units": {
                    "type": "integer",
                    "description": "Amount of units to transfer."
                  },
                  "shipSymbol": {
                    "type": "string",
                    "description": "The symbol of the ship to transfer to."
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Transfer successful.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Transfer Cargo 200 Response",
                  "required": [
                    "data"
                  ],
                  "type": "object",
                  "properties": {
                    "data": {
                      "required": [
                        "cargo"
                      ],
                      "type": "object",
                      "properties": {
                        "cargo": {
                          "$ref": "#/components/schemas/ShipCargo"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "AgentToken": []
          }
        ]
      },
      "parameters": [
        {
          "name": "shipSymbol",
          "in": "path",
          "description": "The transferring ship's symbol.",
          "required": true,
          "style": "simple",
          "explode": false,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/my/ships/{shipSymbol}/negotiate/contract": {
      "post": {
        "tags": [
          "Fleet"
        ],
        "summary": "Negotiate Contract",
        "description": "Negotiate a new contract with the HQ.\n\nIn order to negotiate a new contract, an agent must not have ongoing or offered contracts over the allowed maximum amount. Currently the maximum contracts an agent can have at a time is 1.\n\nOnce a contract is negotiated, it is added to the list of contracts offered to the agent, which the agent can then accept. \n\nThe ship must be present at any waypoint with a faction present to negotiate a contract with that faction.",
        "operationId": "negotiateContract",
        "responses": {
          "201": {
            "description": "Successfully negotiated a new contract.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Negotiate Contract 200 Response",
                  "required": [
                    "data"
                  ],
                  "type": "object",
                  "properties": {
                    "data": {
                      "required": [
                        "contract"
                      ],
                      "type": "object",
                      "properties": {
                        "contract": {
                          "$ref": "#/components/schemas/Contract"
                        }
                      }
                    }
                  },
                  "description": ""
                }
              }
            }
          }
        },
        "security": [
          {
            "AgentToken": []
          }
        ]
      },
      "parameters": [
        {
          "name": "shipSymbol",
          "in": "path",
          "description": "The ship's symbol.",
          "required": true,
          "style": "simple",
          "explode": false,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/my/ships/{shipSymbol}/mounts": {
      "get": {
        "tags": [
          "Fleet"
        ],
        "summary": "Get Mounts",
        "description": "Get the mounts installed on a ship.",
        "operationId": "get-mounts",
        "responses": {
          "200": {
            "description": "Got installed mounts.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Get Mounts 200 Response",
                  "required": [
                    "data"
                  ],
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ShipMount"
                      }
                    }
                  },
                  "description": ""
                }
              }
            }
          }
        },
        "security": [
          {
            "AgentToken": []
          }
        ]
      },
      "parameters": [
        {
          "name": "shipSymbol",
          "in": "path",
          "description": "The ship's symbol.",
          "required": true,
          "style": "simple",
          "explode": false,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/my/ships/{shipSymbol}/mounts/install": {
      "post": {
        "tags": [
          "Fleet"
        ],
        "summary": "Install Mount",
        "description": "Install a mount on a ship.\n\nIn order to install a mount, the ship must be docked and located in a waypoint that has a `Shipyard` trait. The ship also must have the mount to install in its cargo hold.\n\nAn installation fee will be deduced by the Shipyard for installing the mount on the ship. ",
        "operationId": "install-mount",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "title": "Install Mount Request",
                "required": [
                  "symbol"
                ],
                "type": "object",
                "properties": {
                  "symbol": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successfully installed the mount.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Install Mount 201 Response",
                  "required": [
                    "data"
                  ],
                  "type": "object",
                  "properties": {
                    "data": {
                      "required": [
                        "agent",
                        "cargo",
                        "mounts",
                        "transaction"
                      ],
                      "type": "object",
                      "properties": {
                        "agent": {
                          "$ref": "#/components/schemas/Agent"
                        },
                        "mounts": {
                          "type": "array",
                          "description": "List of installed mounts after the installation of the new mount.",
                          "items": {
                            "$ref": "#/components/schemas/ShipMount"
                          }
                        },
                        "cargo": {
                          "$ref": "#/components/schemas/ShipCargo"
                        },
                        "transaction": {
                          "$ref": "#/components/schemas/ShipModificationTransaction"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "AgentToken": []
          }
        ]
      },
      "parameters": [
        {
          "name": "shipSymbol",
          "in": "path",
          "description": "The ship's symbol.",
          "required": true,
          "style": "simple",
          "explode": false,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/my/ships/{shipSymbol}/mounts/remove": {
      "post": {
        "tags": [
          "Fleet"
        ],
        "summary": "Remove Mount",
        "description": "Remove a mount from a ship.\n\nThe ship must be docked in a waypoint that has the `Shipyard` trait, and must have the desired mount that it wish to remove installed.\n\nA removal fee will be deduced from the agent by the Shipyard.",
        "operationId": "remove-mount",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "title": "Remove Mount Request",
                "required": [
                  "symbol"
                ],
                "type": "object",
                "properties": {
                  "symbol": {
                    "type": "string",
                    "description": "The symbol of the mount to remove."
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successfully removed the mount.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Remove Mount 201 Response",
                  "required": [
                    "data"
                  ],
                  "type": "object",
                  "properties": {
                    "data": {
                      "required": [
                        "agent",
                        "cargo",
                        "mounts",
                        "transaction"
                      ],
                      "type": "object",
                      "properties": {
                        "agent": {
                          "$ref": "#/components/schemas/Agent"
                        },
                        "mounts": {
                          "type": "array",
                          "description": "List of installed mounts after the removal of the selected mount.",
                          "items": {
                            "$ref": "#/components/schemas/ShipMount"
                          }
                        },
                        "cargo": {
                          "$ref": "#/components/schemas/ShipCargo"
                        },
                        "transaction": {
                          "$ref": "#/components/schemas/ShipModificationTransaction"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "AgentToken": []
          }
        ]
      },
      "parameters": [
        {
          "name": "shipSymbol",
          "in": "path",
          "description": "The ship's symbol.",
          "required": true,
          "style": "simple",
          "explode": false,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/my/ships/{shipSymbol}/scrap": {
      "get": {
        "tags": [
          "Fleet"
        ],
        "summary": "Get Scrap Ship",
        "description": "Get the amount of value that will be returned when scrapping a ship.",
        "operationId": "get-scrap-ship",
        "responses": {
          "200": {
            "description": "Successfully retrieved the amount of value that will be returned when scrapping a ship.",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "data"
                  ],
                  "type": "object",
                  "properties": {
                    "data": {
                      "required": [
                        "transaction"
                      ],
                      "type": "object",
                      "properties": {
                        "transaction": {
                          "$ref": "#/components/schemas/ScrapTransaction"
                        }
                      }
                    }
                  },
                  "description": ""
                }
              }
            }
          }
        },
        "security": [
          {
            "AgentToken": []
          }
        ],
        "x-preview-feature": true
      },
      "post": {
        "tags": [
          "Fleet"
        ],
        "summary": "Scrap Ship",
        "description": "Scrap a ship, removing it from the game and returning a portion of the ship's value to the agent. The ship must be docked in a waypoint that has the `Shipyard` trait in order to use this function. To preview the amount of value that will be returned, use the Get Ship action.",
        "operationId": "scrap-ship",
        "responses": {
          "200": {
            "description": "Ship scrapped successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "data"
                  ],
                  "type": "object",
                  "properties": {
                    "data": {
                      "required": [
                        "agent",
                        "transaction"
                      ],
                      "type": "object",
                      "properties": {
                        "agent": {
                          "$ref": "#/components/schemas/Agent"
                        },
                        "transaction": {
                          "$ref": "#/components/schemas/ScrapTransaction"
                        }
                      }
                    }
                  },
                  "description": ""
                }
              }
            }
          }
        },
        "security": [
          {
            "AgentToken": []
          }
        ],
        "x-preview-feature": true
      },
      "parameters": [
        {
          "name": "shipSymbol",
          "in": "path",
          "description": "The ship symbol.",
          "required": true,
          "style": "simple",
          "explode": false,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/my/ships/{shipSymbol}/repair": {
      "get": {
        "tags": [
          "Fleet"
        ],
        "summary": "Get Repair Ship",
        "description": "Get the cost of repairing a ship.",
        "operationId": "get-repair-ship",
        "responses": {
          "200": {
            "description": "Successfully retrieved the cost of repairing a ship.",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "data"
                  ],
                  "type": "object",
                  "properties": {
                    "data": {
                      "required": [
                        "transaction"
                      ],
                      "type": "object",
                      "properties": {
                        "transaction": {
                          "$ref": "#/components/schemas/RepairTransaction"
                        }
                      }
                    }
                  },
                  "description": ""
                }
              }
            }
          }
        },
        "security": [
          {
            "AgentToken": []
          }
        ],
        "x-preview-feature": true
      },
      "post": {
        "tags": [
          "Fleet"
        ],
        "summary": "Repair Ship",
        "description": "Repair a ship, restoring the ship to maximum condition. The ship must be docked at a waypoint that has the `Shipyard` trait in order to use this function. To preview the cost of repairing the ship, use the Get action.",
        "operationId": "repair-ship",
        "responses": {
          "200": {
            "description": "Ship repaired successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "data"
                  ],
                  "type": "object",
                  "properties": {
                    "data": {
                      "required": [
                        "agent",
                        "ship",
                        "transaction"
                      ],
                      "type": "object",
                      "properties": {
                        "agent": {
                          "$ref": "#/components/schemas/Agent"
                        },
                        "ship": {
                          "$ref": "#/components/schemas/Ship"
                        },
                        "transaction": {
                          "$ref": "#/components/schemas/RepairTransaction"
                        }
                      }
                    }
                  },
                  "description": ""
                }
              }
            }
          }
        },
        "security": [
          {
            "AgentToken": []
          }
        ],
        "x-preview-feature": true
      },
      "parameters": [
        {
          "name": "shipSymbol",
          "in": "path",
          "description": "The ship symbol.",
          "required": true,
          "style": "simple",
          "explode": false,
          "schema": {
            "type": "string"
          }
        }
      ]
    }
  },
  "components": {
    "schemas": {
      "ActivityLevel": {
        "type": "string",
        "description": "The activity level of a trade good. If the good is an import, this represents how strong consumption is. If the good is an export, this represents how strong the production is for the good. When activity is strong, consumption or production is near maximum capacity. When activity is weak, consumption or production is near minimum capacity.",
        "enum": [
          "WEAK",
          "GROWING",
          "STRONG",
          "RESTRICTED"
        ],
        "x-enumDescriptions": {
          "WEAK": "Indicates very low production or consumption activity. This may suggest a surplus in supply or a lack of demand.",
          "GROWING": "Represents increasing activity in production or consumption, suggesting a developing market.",
          "STRONG": "Signifies high levels of production or consumption. Indicates a healthy and active market with high demand or supply.",
          "RESTRICTED": "Reflects a bottleneck in production or consumption, possibly due to a lack of supply or demand in related goods."
        }
      },
      "Agent": {
        "required": [
          "credits",
          "headquarters",
          "shipCount",
          "startingFaction",
          "symbol"
        ],
        "type": "object",
        "properties": {
          "accountId": {
            "minLength": 1,
            "type": "string",
            "description": "Account ID that is tied to this agent. Only included on your own agent."
          },
          "symbol": {
            "maxLength": 14,
            "minLength": 3,
            "type": "string",
            "description": "Symbol of the agent."
          },
          "headquarters": {
            "minLength": 1,
            "type": "string",
            "description": "The headquarters of the agent."
          },
          "credits": {
            "type": "integer",
            "description": "The number of credits the agent has available. Credits can be negative if funds have been overdrawn.",
            "format": "int64"
          },
          "startingFaction": {
            "minLength": 1,
            "type": "string",
            "description": "The faction the agent started with."
          },
          "shipCount": {
            "type": "integer",
            "description": "How many ships are owned by the agent."
          }
        },
        "description": "Agent details."
      },
      "Chart": {
        "type": "object",
        "properties": {
          "waypointSymbol": {
            "$ref": "#/components/schemas/WaypointSymbol"
          },
          "submittedBy": {
            "type": "string",
            "description": "The agent that submitted the chart for this waypoint."
          },
          "submittedOn": {
            "type": "string",
            "description": "The time the chart for this waypoint was submitted.",
            "format": "date-time"
          }
        },
        "description": "The chart of a system or waypoint, which makes the location visible to other agents."
      },
      "Construction": {
        "required": [
          "isComplete",
          "materials",
          "symbol"
        ],
        "type": "object",
        "properties": {
          "symbol": {
            "type": "string",
            "description": "The symbol of the waypoint."
          },
          "materials": {
            "type": "array",
            "description": "The materials required to construct the waypoint.",
            "items": {
              "$ref": "#/components/schemas/ConstructionMaterial"
            }
          },
          "isComplete": {
            "type": "boolean",
            "description": "Whether the waypoint has been constructed."
          }
        },
        "description": "The construction details of a waypoint."
      },
      "ConstructionMaterial": {
        "required": [
          "fulfilled",
          "required",
          "tradeSymbol"
        ],
        "type": "object",
        "properties": {
          "tradeSymbol": {
            "$ref": "#/components/schemas/TradeSymbol"
          },
          "required": {
            "type": "integer",
            "description": "The number of units required."
          },
          "fulfilled": {
            "type": "integer",
            "description": "The number of units fulfilled toward the required amount."
          }
        },
        "description": "The details of the required construction materials for a given waypoint under construction."
      },
      "Contract": {
        "required": [
          "accepted",
          "expiration",
          "factionSymbol",
          "fulfilled",
          "id",
          "terms",
          "type"
        ],
        "type": "object",
        "properties": {
          "id": {
            "minLength": 1,
            "type": "string",
            "description": "ID of the contract."
          },
          "factionSymbol": {
            "minLength": 1,
            "type": "string",
            "description": "The symbol of the faction that this contract is for."
          },
          "type": {
            "type": "string",
            "description": "Type of contract.",
            "enum": [
              "PROCUREMENT",
              "TRANSPORT",
              "SHUTTLE"
            ]
          },
          "terms": {
            "$ref": "#/components/schemas/ContractTerms"
          },
          "accepted": {
            "type": "boolean",
            "description": "Whether the contract has been accepted by the agent",
            "default": false
          },
          "fulfilled": {
            "type": "boolean",
            "description": "Whether the contract has been fulfilled",
            "default": false
          },
          "expiration": {
            "type": "string",
            "description": "Deprecated in favor of deadlineToAccept",
            "format": "date-time",
            "deprecated": true
          },
          "deadlineToAccept": {
            "type": "string",
            "description": "The time at which the contract is no longer available to be accepted",
            "format": "date-time"
          }
        },
        "description": "Contract details."
      },
      "ContractDeliverGood": {
        "required": [
          "destinationSymbol",
          "tradeSymbol",
          "unitsFulfilled",
          "unitsRequired"
        ],
        "type": "object",
        "properties": {
          "tradeSymbol": {
            "minLength": 1,
            "type": "string",
            "description": "The symbol of the trade good to deliver."
          },
          "destinationSymbol": {
            "minLength": 1,
            "type": "string",
            "description": "The destination where goods need to be delivered."
          },
          "unitsRequired": {
            "type": "integer",
            "description": "The number of units that need to be delivered on this contract."
          },
          "unitsFulfilled": {
            "type": "integer",
            "description": "The number of units fulfilled on this contract."
          }
        },
        "description": "The details of a delivery contract. Includes the type of good, units needed, and the destination."
      },
      "ContractPayment": {
        "required": [
          "onAccepted",
          "onFulfilled"
        ],
        "type": "object",
        "properties": {
          "onAccepted": {
            "type": "integer",
            "description": "The amount of credits received up front for accepting the contract."
          },
          "onFulfilled": {
            "type": "integer",
            "description": "The amount of credits received when the contract is fulfilled."
          }
        },
        "description": "Payments for the contract."
      },
      "ContractTerms": {
        "required": [
          "deadline",
          "payment"
        ],
        "type": "object",
        "properties": {
          "deadline": {
            "type": "string",
            "description": "The deadline for the contract.",
            "format": "date-time"
          },
          "payment": {
            "$ref": "#/components/schemas/ContractPayment"
          },
          "deliver": {
            "type": "array",
            "description": "The cargo that needs to be delivered to fulfill the contract.",
            "items": {
              "$ref": "#/components/schemas/ContractDeliverGood"
            }
          }
        },
        "description": "The terms to fulfill the contract."
      },
      "Cooldown": {
        "required": [
          "remainingSeconds",
          "shipSymbol",
          "totalSeconds"
        ],
        "type": "object",
        "properties": {
          "shipSymbol": {
            "minLength": 1,
            "type": "string",
            "description": "The symbol of the ship that is on cooldown"
          },
          "totalSeconds": {
            "minimum": 0,
            "type": "integer",
            "description": "The total duration of the cooldown in seconds"
          },
          "remainingSeconds": {
            "minimum": 0,
            "type": "integer",
            "description": "The remaining duration of the cooldown in seconds"
          },
          "expiration": {
            "type": "string",
            "description": "The date and time when the cooldown expires in ISO 8601 format",
            "format": "date-time"
          }
        },
        "description": "A cooldown is a period of time in which a ship cannot perform certain actions."
      },
      "Extraction": {
        "required": [
          "shipSymbol",
          "yield"
        ],
        "type": "object",
        "properties": {
          "shipSymbol": {
            "minLength": 1,
            "type": "string",
            "description": "Symbol of the ship that executed the extraction."
          },
          "yield": {
            "$ref": "#/components/schemas/ExtractionYield"
          }
        },
        "description": "Extraction details."
      },
      "ExtractionYield": {
        "required": [
          "symbol",
          "units"
        ],
        "type": "object",
        "properties": {
          "symbol": {
            "$ref": "#/components/schemas/TradeSymbol"
          },
          "units": {
            "type": "integer",
            "description": "The number of units extracted that were placed into the ship's cargo hold."
          }
        },
        "description": "A yield from the extraction operation."
      },
      "Faction": {
        "required": [
          "description",
          "headquarters",
          "isRecruiting",
          "name",
          "symbol",
          "traits"
        ],
        "type": "object",
        "properties": {
          "symbol": {
            "$ref": "#/components/schemas/FactionSymbol"
          },
          "name": {
            "minLength": 1,
            "type": "string",
            "description": "Name of the faction."
          },
          "description": {
            "minLength": 1,
            "type": "string",
            "description": "Description of the faction."
          },
          "headquarters": {
            "minLength": 1,
            "type": "string",
            "description": "The waypoint in which the faction's HQ is located in."
          },
          "traits": {
            "type": "array",
            "description": "List of traits that define this faction.",
            "items": {
              "$ref": "#/components/schemas/FactionTrait"
            }
          },
          "isRecruiting": {
            "type": "boolean",
            "description": "Whether or not the faction is currently recruiting new agents."
          }
        },
        "description": "Faction details."
      },
      "FactionSymbol": {
        "minLength": 1,
        "type": "string",
        "description": "The symbol of the faction.",
        "enum": [
          "COSMIC",
          "VOID",
          "GALACTIC",
          "QUANTUM",
          "DOMINION",
          "ASTRO",
          "CORSAIRS",
          "OBSIDIAN",
          "AEGIS",
          "UNITED",
          "SOLITARY",
          "COBALT",
          "OMEGA",
          "ECHO",
          "LORDS",
          "CULT",
          "ANCIENTS",
          "SHADOW",
          "ETHEREAL"
        ]
      },
      "FactionTrait": {
        "required": [
          "description",
          "name",
          "symbol"
        ],
        "type": "object",
        "properties": {
          "symbol": {
            "$ref": "#/components/schemas/FactionTraitSymbol"
          },
          "name": {
            "type": "string",
            "description": "The name of the trait."
          },
          "description": {
            "type": "string",
            "description": "A description of the trait."
          }
        }
      },
      "FactionTraitSymbol": {
        "type": "string",
        "description": "The unique identifier of the trait.",
        "enum": [
          "BUREAUCRATIC",
          "SECRETIVE",
          "CAPITALISTIC",
          "INDUSTRIOUS",
          "PEACEFUL",
          "DISTRUSTFUL",
          "WELCOMING",
          "SMUGGLERS",
          "SCAVENGERS",
          "REBELLIOUS",
          "EXILES",
          "PIRATES",
          "RAIDERS",
          "CLAN",
          "GUILD",
          "DOMINION",
          "FRINGE",
          "FORSAKEN",
          "ISOLATED",
          "LOCALIZED",
          "ESTABLISHED",
          "NOTABLE",
          "DOMINANT",
          "INESCAPABLE",
          "INNOVATIVE",
          "BOLD",
          "VISIONARY",
          "CURIOUS",
          "DARING",
          "EXPLORATORY",
          "RESOURCEFUL",
          "FLEXIBLE",
          "COOPERATIVE",
          "UNITED",
          "STRATEGIC",
          "INTELLIGENT",
          "RESEARCH_FOCUSED",
          "COLLABORATIVE",
          "PROGRESSIVE",
          "MILITARISTIC",
          "TECHNOLOGICALLY_ADVANCED",
          "AGGRESSIVE",
          "IMPERIALISTIC",
          "TREASURE_HUNTERS",
          "DEXTEROUS",
          "UNPREDICTABLE",
          "BRUTAL",
          "FLEETING",
          "ADAPTABLE",
          "SELF_SUFFICIENT",
          "DEFENSIVE",
          "PROUD",
          "DIVERSE",
          "INDEPENDENT",
          "SELF_INTERESTED",
          "FRAGMENTED",
          "COMMERCIAL",
          "FREE_MARKETS",
          "ENTREPRENEURIAL"
        ]
      },
      "JumpGate": {
        "required": [
          "connections",
          "symbol"
        ],
        "type": "object",
        "properties": {
          "symbol": {
            "$ref": "#/components/schemas/WaypointSymbol"
          },
          "connections": {
            "type": "array",
            "description": "All the gates that are connected to this waypoint.",
            "items": {
              "type": "string",
              "description": "The symbol of the waypoint that has a corresponding gate."
            }
          }
        },
        "description": ""
      },
      "Market": {
        "required": [
          "exchange",
          "exports",
          "imports",
          "symbol"
        ],
        "type": "object",
        "properties": {
          "symbol": {
            "type": "string",
            "description": "The symbol of the market. The symbol is the same as the waypoint where the market is located."
          },
          "exports": {
            "type": "array",
            "description": "The list of goods that are exported from this market.",
            "items": {
              "$ref": "#/components/schemas/TradeGood"
            }
          },
          "imports": {
            "type": "array",
            "description": "The list of goods that are sought as imports in this market.",
            "items": {
              "$ref": "#/components/schemas/TradeGood"
            }
          },
          "exchange": {
            "type": "array",
            "description": "The list of goods that are bought and sold between agents at this market.",
            "items": {
              "$ref": "#/components/schemas/TradeGood"
            }
          },
          "transactions": {
            "type": "array",
            "description": "The list of recent transactions at this market. Visible only when a ship is present at the market.",
            "items": {
              "$ref": "#/components/schemas/MarketTransaction"
            }
          },
          "tradeGoods": {
            "type": "array",
            "description": "The list of goods that are traded at this market. Visible only when a ship is present at the market.",
            "items": {
              "$ref": "#/components/schemas/MarketTradeGood"
            }
          }
        },
        "description": ""
      },
      "MarketTradeGood": {
        "required": [
          "purchasePrice",
          "sellPrice",
          "supply",
          "symbol",
          "tradeVolume",
          "type"
        ],
        "type": "object",
        "properties": {
          "symbol": {
            "$ref": "#/components/schemas/TradeSymbol"
          },
          "type": {
            "type": "string",
            "description": "The type of trade good (export, import, or exchange).",
            "enum": [
              "EXPORT",
              "IMPORT",
              "EXCHANGE"
            ]
          },
          "tradeVolume": {
            "minimum": 1,
            "type": "integer",
            "description": "This is the maximum number of units that can be purchased or sold at this market in a single trade for this good. Trade volume also gives an indication of price volatility. A market with a low trade volume will have large price swings, while high trade volume will be more resilient to price changes."
          },
          "supply": {
            "$ref": "#/components/schemas/SupplyLevel"
          },
          "activity": {
            "$ref": "#/components/schemas/ActivityLevel"
          },
          "purchasePrice": {
            "minimum": 0,
            "type": "integer",
            "description": "The price at which this good can be purchased from the market."
          },
          "sellPrice": {
            "minimum": 0,
            "type": "integer",
            "description": "The price at which this good can be sold to the market."
          }
        }
      },
      "MarketTransaction": {
        "required": [
          "pricePerUnit",
          "shipSymbol",
          "timestamp",
          "totalPrice",
          "tradeSymbol",
          "type",
          "units",
          "waypointSymbol"
        ],
        "type": "object",
        "properties": {
          "waypointSymbol": {
            "$ref": "#/components/schemas/WaypointSymbol"
          },
          "shipSymbol": {
            "type": "string",
            "description": "The symbol of the ship that made the transaction."
          },
          "tradeSymbol": {
            "type": "string",
            "description": "The symbol of the trade good."
          },
          "type": {
            "type": "string",
            "description": "The type of transaction.",
            "enum": [
              "PURCHASE",
              "SELL"
            ]
          },
          "units": {
            "minimum": 0,
            "type": "integer",
            "description": "The number of units of the transaction."
          },
          "pricePerUnit": {
            "minimum": 0,
            "type": "integer",
            "description": "The price per unit of the transaction."
          },
          "totalPrice": {
            "minimum": 0,
            "type": "integer",
            "description": "The total price of the transaction."
          },
          "timestamp": {
            "type": "string",
            "description": "The timestamp of the transaction.",
            "format": "date-time"
          }
        },
        "description": "Result of a transaction with a market."
      },
      "Meta": {
        "required": [
          "limit",
          "page",
          "total"
        ],
        "type": "object",
        "properties": {
          "total": {
            "minimum": 0,
            "type": "integer",
            "description": "Shows the total amount of items of this kind that exist."
          },
          "page": {
            "minimum": 1,
            "type": "integer",
            "description": "A page denotes an amount of items, offset from the first item. Each page holds an amount of items equal to the `limit`.",
            "default": 1
          },
          "limit": {
            "maximum": 20,
            "minimum": 1,
            "type": "integer",
            "description": "The amount of items in each page. Limits how many items can be fetched at once.",
            "default": 10
          }
        },
        "description": "Meta details for pagination.",
        "x-examples": {
          "example-1": {
            "total": 6,
            "page": 1,
            "limit": 20
          }
        }
      },
      "RepairTransaction": {
        "required": [
          "shipSymbol",
          "timestamp",
          "totalPrice",
          "waypointSymbol"
        ],
        "type": "object",
        "properties": {
          "waypointSymbol": {
            "$ref": "#/components/schemas/WaypointSymbol"
          },
          "shipSymbol": {
            "type": "string",
            "description": "The symbol of the ship."
          },
          "totalPrice": {
            "minimum": 0,
            "type": "integer",
            "description": "The total price of the transaction."
          },
          "timestamp": {
            "type": "string",
            "description": "The timestamp of the transaction.",
            "format": "date-time"
          }
        },
        "description": "Result of a repair transaction."
      },
      "ScannedShip": {
        "required": [
          "engine",
          "nav",
          "registration",
          "symbol"
        ],
        "type": "object",
        "properties": {
          "symbol": {
            "type": "string",
            "description": "The globally unique identifier of the ship."
          },
          "registration": {
            "$ref": "#/components/schemas/ShipRegistration"
          },
          "nav": {
            "$ref": "#/components/schemas/ShipNav"
          },
          "frame": {
            "required": [
              "symbol"
            ],
            "type": "object",
            "properties": {
              "symbol": {
                "type": "string",
                "description": "The symbol of the frame."
              }
            },
            "description": "The frame of the ship."
          },
          "reactor": {
            "required": [
              "symbol"
            ],
            "type": "object",
            "properties": {
              "symbol": {
                "type": "string",
                "description": "The symbol of the reactor."
              }
            },
            "description": "The reactor of the ship."
          },
          "engine": {
            "required": [
              "symbol"
            ],
            "type": "object",
            "properties": {
              "symbol": {
                "type": "string",
                "description": "The symbol of the engine."
              }
            },
            "description": "The engine of the ship."
          },
          "mounts": {
            "type": "array",
            "description": "List of mounts installed in the ship.",
            "items": {
              "required": [
                "symbol"
              ],
              "type": "object",
              "properties": {
                "symbol": {
                  "type": "string",
                  "description": "The symbol of the mount."
                }
              },
              "description": "A mount on the ship."
            }
          }
        },
        "description": "The ship that was scanned. Details include information about the ship that could be detected by the scanner."
      },
      "ScannedSystem": {
        "required": [
          "distance",
          "sectorSymbol",
          "symbol",
          "type",
          "x",
          "y"
        ],
        "type": "object",
        "properties": {
          "symbol": {
            "minLength": 1,
            "type": "string",
            "description": "Symbol of the system."
          },
          "sectorSymbol": {
            "minLength": 1,
            "type": "string",
            "description": "Symbol of the system's sector."
          },
          "type": {
            "$ref": "#/components/schemas/SystemType"
          },
          "x": {
            "type": "integer",
            "description": "Position in the universe in the x axis."
          },
          "y": {
            "type": "integer",
            "description": "Position in the universe in the y axis."
          },
          "distance": {
            "type": "integer",
            "description": "The system's distance from the scanning ship."
          }
        },
        "description": "Details of a system was that scanned."
      },
      "ScannedWaypoint": {
        "required": [
          "orbitals",
          "symbol",
          "systemSymbol",
          "traits",
          "type",
          "x",
          "y"
        ],
        "type": "object",
        "properties": {
          "symbol": {
            "$ref": "#/components/schemas/WaypointSymbol"
          },
          "type": {
            "$ref": "#/components/schemas/WaypointType"
          },
          "systemSymbol": {
            "$ref": "#/components/schemas/SystemSymbol"
          },
          "x": {
            "type": "integer",
            "description": "Position in the universe in the x axis."
          },
          "y": {
            "type": "integer",
            "description": "Position in the universe in the y axis."
          },
          "orbitals": {
            "type": "array",
            "description": "List of waypoints that orbit this waypoint.",
            "items": {
              "$ref": "#/components/schemas/WaypointOrbital"
            }
          },
          "faction": {
            "$ref": "#/components/schemas/WaypointFaction"
          },
          "traits": {
            "type": "array",
            "description": "The traits of the waypoint.",
            "items": {
              "$ref": "#/components/schemas/WaypointTrait"
            }
          },
          "chart": {
            "$ref": "#/components/schemas/Chart"
          }
        },
        "description": "A waypoint that was scanned by a ship."
      },
      "ScrapTransaction": {
        "required": [
          "shipSymbol",
          "timestamp",
          "totalPrice",
          "waypointSymbol"
        ],
        "type": "object",
        "properties": {
          "waypointSymbol": {
            "$ref": "#/components/schemas/WaypointSymbol"
          },
          "shipSymbol": {
            "type": "string",
            "description": "The symbol of the ship."
          },
          "totalPrice": {
            "minimum": 0,
            "type": "integer",
            "description": "The total price of the transaction."
          },
          "timestamp": {
            "type": "string",
            "description": "The timestamp of the transaction.",
            "format": "date-time"
          }
        },
        "description": "Result of a scrap transaction."
      },
      "Ship": {
        "required": [
          "cargo",
          "cooldown",
          "crew",
          "engine",
          "frame",
          "fuel",
          "modules",
          "mounts",
          "nav",
          "reactor",
          "registration",
          "symbol"
        ],
        "type": "object",
        "properties": {
          "symbol": {
            "type": "string",
            "description": "The globally unique identifier of the ship in the following format: `[AGENT_SYMBOL]-[HEX_ID]`"
          },
          "registration": {
            "$ref": "#/components/schemas/ShipRegistration"
          },
          "nav": {
            "$ref": "#/components/schemas/ShipNav"
          },
          "crew": {
            "$ref": "#/components/schemas/ShipCrew"
          },
          "frame": {
            "$ref": "#/components/schemas/ShipFrame"
          },
          "reactor": {
            "$ref": "#/components/schemas/ShipReactor"
          },
          "engine": {
            "$ref": "#/components/schemas/ShipEngine"
          },
          "cooldown": {
            "$ref": "#/components/schemas/Cooldown"
          },
          "modules": {
            "type": "array",
            "description": "Modules installed in this ship.",
            "items": {
              "$ref": "#/components/schemas/ShipModule"
            }
          },
          "mounts": {
            "type": "array",
            "description": "Mounts installed in this ship.",
            "items": {
              "$ref": "#/components/schemas/ShipMount"
            }
          },
          "cargo": {
            "$ref": "#/components/schemas/ShipCargo"
          },
          "fuel": {
            "$ref": "#/components/schemas/ShipFuel"
          }
        },
        "description": "Ship details."
      },
      "ShipCargo": {
        "required": [
          "capacity",
          "inventory",
          "units"
        ],
        "type": "object",
        "properties": {
          "capacity": {
            "minimum": 0,
            "type": "integer",
            "description": "The max number of items that can be stored in the cargo hold."
          },
          "units": {
            "minimum": 0,
            "type": "integer",
            "description": "The number of items currently stored in the cargo hold."
          },
          "inventory": {
            "type": "array",
            "description": "The items currently in the cargo hold.",
            "items": {
              "$ref": "#/components/schemas/ShipCargoItem"
            }
          }
        },
        "description": "Ship cargo details."
      },
      "ShipCargoItem": {
        "required": [
          "description",
          "name",
          "symbol",
          "units"
        ],
        "type": "object",
        "properties": {
          "symbol": {
            "$ref": "#/components/schemas/TradeSymbol"
          },
          "name": {
            "type": "string",
            "description": "The name of the cargo item type."
          },
          "description": {
            "type": "string",
            "description": "The description of the cargo item type."
          },
          "units": {
            "minimum": 1,
            "type": "integer",
            "description": "The number of units of the cargo item."
          }
        },
        "description": "The type of cargo item and the number of units."
      },
      "ShipComponentCondition": {
        "maximum": 1,
        "minimum": 0,
        "type": "number",
        "description": "The repairable condition of a component. A value of 0 indicates the component needs significant repairs, while a value of 1 indicates the component is in near perfect condition. As the condition of a component is repaired, the overall integrity of the component decreases.",
        "format": "double"
      },
      "ShipComponentIntegrity": {
        "maximum": 1,
        "minimum": 0,
        "type": "number",
        "description": "The overall integrity of the component, which determines the performance of the component. A value of 0 indicates that the component is almost completely degraded, while a value of 1 indicates that the component is in near perfect condition. The integrity of the component is non-repairable, and represents permanent wear over time.",
        "format": "double"
      },
      "ShipConditionEvent": {
        "required": [
          "component",
          "description",
          "name",
          "symbol"
        ],
        "type": "object",
        "properties": {
          "symbol": {
            "type": "string",
            "enum": [
              "REACTOR_OVERLOAD",
              "ENERGY_SPIKE_FROM_MINERAL",
              "SOLAR_FLARE_INTERFERENCE",
              "COOLANT_LEAK",
              "POWER_DISTRIBUTION_FLUCTUATION",
              "MAGNETIC_FIELD_DISRUPTION",
              "HULL_MICROMETEORITE_STRIKES",
              "STRUCTURAL_STRESS_FRACTURES",
              "CORROSIVE_MINERAL_CONTAMINATION",
              "THERMAL_EXPANSION_MISMATCH",
              "VIBRATION_DAMAGE_FROM_DRILLING",
              "ELECTROMAGNETIC_FIELD_INTERFERENCE",
              "IMPACT_WITH_EXTRACTED_DEBRIS",
              "FUEL_EFFICIENCY_DEGRADATION",
              "COOLANT_SYSTEM_AGEING",
              "DUST_MICROABRASIONS",
              "THRUSTER_NOZZLE_WEAR",
              "EXHAUST_PORT_CLOGGING",
              "BEARING_LUBRICATION_FADE",
              "SENSOR_CALIBRATION_DRIFT",
              "HULL_MICROMETEORITE_DAMAGE",
              "SPACE_DEBRIS_COLLISION",
              "THERMAL_STRESS",
              "VIBRATION_OVERLOAD",
              "PRESSURE_DIFFERENTIAL_STRESS",
              "ELECTROMAGNETIC_SURGE_EFFECTS",
              "ATMOSPHERIC_ENTRY_HEAT"
            ]
          },
          "component": {
            "type": "string",
            "enum": [
              "FRAME",
              "REACTOR",
              "ENGINE"
            ]
          },
          "name": {
            "type": "string",
            "description": "The name of the event."
          },
          "description": {
            "type": "string",
            "description": "A description of the event."
          }
        },
        "description": "An event that represents damage or wear to a ship's reactor, frame, or engine, reducing the condition of the ship."
      },
      "ShipCrew": {
        "required": [
          "capacity",
          "current",
          "morale",
          "required",
          "rotation",
          "wages"
        ],
        "type": "object",
        "properties": {
          "current": {
            "type": "integer",
            "description": "The current number of crew members on the ship."
          },
          "required": {
            "type": "integer",
            "description": "The minimum number of crew members required to maintain the ship."
          },
          "capacity": {
            "type": "integer",
            "description": "The maximum number of crew members the ship can support."
          },
          "rotation": {
            "type": "string",
            "description": "The rotation of crew shifts. A stricter shift improves the ship's performance. A more relaxed shift improves the crew's morale.",
            "default": "STRICT",
            "enum": [
              "STRICT",
              "RELAXED"
            ]
          },
          "morale": {
            "maximum": 100,
            "minimum": 0,
            "type": "integer",
            "description": "A rough measure of the crew's morale. A higher morale means the crew is happier and more productive. A lower morale means the ship is more prone to accidents."
          },
          "wages": {
            "minimum": 0,
            "type": "integer",
            "description": "The amount of credits per crew member paid per hour. Wages are paid when a ship docks at a civilized waypoint."
          }
        },
        "description": "The ship's crew service and maintain the ship's systems and equipment."
      },
      "ShipEngine": {
        "required": [
          "condition",
          "description",
          "integrity",
          "name",
          "requirements",
          "speed",
          "symbol"
        ],
        "type": "object",
        "properties": {
          "symbol": {
            "type": "string",
            "description": "The symbol of the engine.",
            "enum": [
              "ENGINE_IMPULSE_DRIVE_I",
              "ENGINE_ION_DRIVE_I",
              "ENGINE_ION_DRIVE_II",
              "ENGINE_HYPER_DRIVE_I"
            ]
          },
          "name": {
            "type": "string",
            "description": "The name of the engine."
          },
          "description": {
            "type": "string",
            "description": "The description of the engine."
          },
          "condition": {
            "$ref": "#/components/schemas/ShipComponentCondition"
          },
          "integrity": {
            "$ref": "#/components/schemas/ShipComponentIntegrity"
          },
          "speed": {
            "minimum": 1,
            "type": "integer",
            "description": "The speed stat of this engine. The higher the speed, the faster a ship can travel from one point to another. Reduces the time of arrival when navigating the ship."
          },
          "requirements": {
            "$ref": "#/components/schemas/ShipRequirements"
          }
        },
        "description": "The engine determines how quickly a ship travels between waypoints."
      },
      "ShipFrame": {
        "required": [
          "condition",
          "description",
          "fuelCapacity",
          "integrity",
          "moduleSlots",
          "mountingPoints",
          "name",
          "requirements",
          "symbol"
        ],
        "type": "object",
        "properties": {
          "symbol": {
            "type": "string",
            "description": "Symbol of the frame.",
            "enum": [
              "FRAME_PROBE",
              "FRAME_DRONE",
              "FRAME_INTERCEPTOR",
              "FRAME_RACER",
              "FRAME_FIGHTER",
              "FRAME_FRIGATE",
              "FRAME_SHUTTLE",
              "FRAME_EXPLORER",
              "FRAME_MINER",
              "FRAME_LIGHT_FREIGHTER",
              "FRAME_HEAVY_FREIGHTER",
              "FRAME_TRANSPORT",
              "FRAME_DESTROYER",
              "FRAME_CRUISER",
              "FRAME_CARRIER"
            ]
          },
          "name": {
            "type": "string",
            "description": "Name of the frame."
          },
          "description": {
            "type": "string",
            "description": "Description of the frame."
          },
          "condition": {
            "$ref": "#/components/schemas/ShipComponentCondition"
          },
          "integrity": {
            "$ref": "#/components/schemas/ShipComponentIntegrity"
          },
          "moduleSlots": {
            "minimum": 0,
            "type": "integer",
            "description": "The amount of slots that can be dedicated to modules installed in the ship. Each installed module take up a number of slots, and once there are no more slots, no new modules can be installed."
          },
          "mountingPoints": {
            "minimum": 0,
            "type": "integer",
            "description": "The amount of slots that can be dedicated to mounts installed in the ship. Each installed mount takes up a number of points, and once there are no more points remaining, no new mounts can be installed."
          },
          "fuelCapacity": {
            "minimum": 0,
            "type": "integer",
            "description": "The maximum amount of fuel that can be stored in this ship. When refueling, the ship will be refueled to this amount."
          },
          "requirements": {
            "$ref": "#/components/schemas/ShipRequirements"
          }
        },
        "description": "The frame of the ship. The frame determines the number of modules and mounting points of the ship, as well as base fuel capacity. As the condition of the frame takes more wear, the ship will become more sluggish and less maneuverable."
      },
      "ShipFuel": {
        "required": [
          "capacity",
          "current"
        ],
        "type": "object",
        "properties": {
          "current": {
            "minimum": 0,
            "type": "integer",
            "description": "The current amount of fuel in the ship's tanks."
          },
          "capacity": {
            "minimum": 0,
            "type": "integer",
            "description": "The maximum amount of fuel the ship's tanks can hold."
          },
          "consumed": {
            "required": [
              "amount",
              "timestamp"
            ],
            "type": "object",
            "properties": {
              "amount": {
                "minimum": 0,
                "type": "integer",
                "description": "The amount of fuel consumed by the most recent transit or action."
              },
              "timestamp": {
                "type": "string",
                "description": "The time at which the fuel was consumed.",
                "format": "date-time"
              }
            },
            "description": "An object that only shows up when an action has consumed fuel in the process. Shows the fuel consumption data."
          }
        },
        "description": "Details of the ship's fuel tanks including how much fuel was consumed during the last transit or action."
      },
      "ShipModificationTransaction": {
        "required": [
          "shipSymbol",
          "timestamp",
          "totalPrice",
          "tradeSymbol",
          "waypointSymbol"
        ],
        "type": "object",
        "properties": {
          "waypointSymbol": {
            "type": "string",
            "description": "The symbol of the waypoint where the transaction took place."
          },
          "shipSymbol": {
            "type": "string",
            "description": "The symbol of the ship that made the transaction."
          },
          "tradeSymbol": {
            "type": "string",
            "description": "The symbol of the trade good."
          },
          "totalPrice": {
            "minimum": 0,
            "type": "integer",
            "description": "The total price of the transaction."
          },
          "timestamp": {
            "type": "string",
            "description": "The timestamp of the transaction.",
            "format": "date-time"
          }
        },
        "description": "Result of a transaction for a ship modification, such as installing a mount or a module."
      },
      "ShipModule": {
        "required": [
          "description",
          "name",
          "requirements",
          "symbol"
        ],
        "type": "object",
        "properties": {
          "symbol": {
            "type": "string",
            "description": "The symbol of the module.",
            "enum": [
              "MODULE_MINERAL_PROCESSOR_I",
              "MODULE_GAS_PROCESSOR_I",
              "MODULE_CARGO_HOLD_I",
              "MODULE_CARGO_HOLD_II",
              "MODULE_CARGO_HOLD_III",
              "MODULE_CREW_QUARTERS_I",
              "MODULE_ENVOY_QUARTERS_I",
              "MODULE_PASSENGER_CABIN_I",
              "MODULE_MICRO_REFINERY_I",
              "MODULE_ORE_REFINERY_I",
              "MODULE_FUEL_REFINERY_I",
              "MODULE_SCIENCE_LAB_I",
              "MODULE_JUMP_DRIVE_I",
              "MODULE_JUMP_DRIVE_II",
              "MODULE_JUMP_DRIVE_III",
              "MODULE_WARP_DRIVE_I",
              "MODULE_WARP_DRIVE_II",
              "MODULE_WARP_DRIVE_III",
              "MODULE_SHIELD_GENERATOR_I",
              "MODULE_SHIELD_GENERATOR_II"
            ]
          },
          "capacity": {
            "minimum": 0,
            "type": "integer",
            "description": "Modules that provide capacity, such as cargo hold or crew quarters will show this value to denote how much of a bonus the module grants."
          },
          "range": {
            "minimum": 0,
            "type": "integer",
            "description": "Modules that have a range will such as a sensor array show this value to denote how far can the module reach with its capabilities."
          },
          "name": {
            "type": "string",
            "description": "Name of this module."
          },
          "description": {
            "type": "string",
            "description": "Description of this module."
          },
          "requirements": {
            "$ref": "#/components/schemas/ShipRequirements"
          }
        },
        "description": "A module can be installed in a ship and provides a set of capabilities such as storage space or quarters for crew. Module installations are permanent."
      },
      "ShipMount": {
        "required": [
          "name",
          "requirements",
          "symbol"
        ],
        "type": "object",
        "properties": {
          "symbol": {
            "type": "string",
            "description": "Symbo of this mount.",
            "enum": [
              "MOUNT_GAS_SIPHON_I",
              "MOUNT_GAS_SIPHON_II",
              "MOUNT_GAS_SIPHON_III",
              "MOUNT_SURVEYOR_I",
              "MOUNT_SURVEYOR_II",
              "MOUNT_SURVEYOR_III",
              "MOUNT_SENSOR_ARRAY_I",
              "MOUNT_SENSOR_ARRAY_II",
              "MOUNT_SENSOR_ARRAY_III",
              "MOUNT_MINING_LASER_I",
              "MOUNT_MINING_LASER_II",
              "MOUNT_MINING_LASER_III",
              "MOUNT_LASER_CANNON_I",
              "MOUNT_MISSILE_LAUNCHER_I",
              "MOUNT_TURRET_I"
            ]
          },
          "name": {
            "type": "string",
            "description": "Name of this mount."
          },
          "description": {
            "type": "string",
            "description": "Description of this mount."
          },
          "strength": {
            "minimum": 0,
            "type": "integer",
            "description": "Mounts that have this value, such as mining lasers, denote how powerful this mount's capabilities are."
          },
          "deposits": {
            "type": "array",
            "description": "Mounts that have this value denote what goods can be produced from using the mount.",
            "items": {
              "type": "string",
              "enum": [
                "QUARTZ_SAND",
                "SILICON_CRYSTALS",
                "PRECIOUS_STONES",
                "ICE_WATER",
                "AMMONIA_ICE",
                "IRON_ORE",
                "COPPER_ORE",
                "SILVER_ORE",
                "ALUMINUM_ORE",
                "GOLD_ORE",
                "PLATINUM_ORE",
                "DIAMONDS",
                "URANITE_ORE",
                "MERITIUM_ORE"
              ]
            }
          },
          "requirements": {
            "$ref": "#/components/schemas/ShipRequirements"
          }
        },
        "description": "A mount is installed on the exterier of a ship."
      },
      "ShipNav": {
        "required": [
          "flightMode",
          "route",
          "status",
          "systemSymbol",
          "waypointSymbol"
        ],
        "type": "object",
        "properties": {
          "systemSymbol": {
            "$ref": "#/components/schemas/SystemSymbol"
          },
          "waypointSymbol": {
            "$ref": "#/components/schemas/WaypointSymbol"
          },
          "route": {
            "$ref": "#/components/schemas/ShipNavRoute"
          },
          "status": {
            "$ref": "#/components/schemas/ShipNavStatus"
          },
          "flightMode": {
            "$ref": "#/components/schemas/ShipNavFlightMode"
          }
        },
        "description": "The navigation information of the ship."
      },
      "ShipNavFlightMode": {
        "type": "string",
        "description": "The ship's set speed when traveling between waypoints or systems.",
        "default": "CRUISE",
        "enum": [
          "DRIFT",
          "STEALTH",
          "CRUISE",
          "BURN"
        ]
      },
      "ShipNavRoute": {
        "required": [
          "arrival",
          "departure",
          "departureTime",
          "destination",
          "origin"
        ],
        "type": "object",
        "properties": {
          "destination": {
            "$ref": "#/components/schemas/ShipNavRouteWaypoint"
          },
          "origin": {
            "$ref": "#/components/schemas/ShipNavRouteWaypoint"
          },
          "departureTime": {
            "type": "string",
            "description": "The date time of the ship's departure.",
            "format": "date-time"
          },
          "arrival": {
            "type": "string",
            "description": "The date time of the ship's arrival. If the ship is in-transit, this is the expected time of arrival.",
            "format": "date-time"
          }
        },
        "description": "The routing information for the ship's most recent transit or current location."
      },
      "ShipNavRouteWaypoint": {
        "required": [
          "symbol",
          "systemSymbol",
          "type",
          "x",
          "y"
        ],
        "type": "object",
        "properties": {
          "symbol": {
            "minLength": 1,
            "type": "string",
            "description": "The symbol of the waypoint."
          },
          "type": {
            "$ref": "#/components/schemas/WaypointType"
          },
          "systemSymbol": {
            "$ref": "#/components/schemas/SystemSymbol"
          },
          "x": {
            "type": "integer",
            "description": "Position in the universe in the x axis."
          },
          "y": {
            "type": "integer",
            "description": "Position in the universe in the y axis."
          }
        },
        "description": "The destination or departure of a ships nav route."
      },
      "ShipNavStatus": {
        "type": "string",
        "description": "The current status of the ship",
        "enum": [
          "IN_TRANSIT",
          "IN_ORBIT",
          "DOCKED"
        ]
      },
      "ShipReactor": {
        "required": [
          "condition",
          "description",
          "integrity",
          "name",
          "powerOutput",
          "requirements",
          "symbol"
        ],
        "type": "object",
        "properties": {
          "symbol": {
            "type": "string",
            "description": "Symbol of the reactor.",
            "enum": [
              "REACTOR_SOLAR_I",
              "REACTOR_FUSION_I",
              "REACTOR_FISSION_I",
              "REACTOR_CHEMICAL_I",
              "REACTOR_ANTIMATTER_I"
            ]
          },
          "name": {
            "type": "string",
            "description": "Name of the reactor."
          },
          "description": {
            "type": "string",
            "description": "Description of the reactor."
          },
          "condition": {
            "$ref": "#/components/schemas/ShipComponentCondition"
          },
          "integrity": {
            "$ref": "#/components/schemas/ShipComponentIntegrity"
          },
          "powerOutput": {
            "minimum": 1,
            "type": "integer",
            "description": "The amount of power provided by this reactor. The more power a reactor provides to the ship, the lower the cooldown it gets when using a module or mount that taxes the ship's power."
          },
          "requirements": {
            "$ref": "#/components/schemas/ShipRequirements"
          }
        },
        "description": "The reactor of the ship. The reactor is responsible for powering the ship's systems and weapons."
      },
      "ShipRegistration": {
        "required": [
          "factionSymbol",
          "name",
          "role"
        ],
        "type": "object",
        "properties": {
          "name": {
            "minLength": 1,
            "type": "string",
            "description": "The agent's registered name of the ship"
          },
          "factionSymbol": {
            "minLength": 1,
            "type": "string",
            "description": "The symbol of the faction the ship is registered with"
          },
          "role": {
            "$ref": "#/components/schemas/ShipRole"
          }
        },
        "description": "The public registration information of the ship"
      },
      "ShipRequirements": {
        "type": "object",
        "properties": {
          "power": {
            "type": "integer",
            "description": "The amount of power required from the reactor."
          },
          "crew": {
            "type": "integer",
            "description": "The number of crew required for operation."
          },
          "slots": {
            "type": "integer",
            "description": "The number of module slots required for installation."
          }
        },
        "description": "The requirements for installation on a ship"
      },
      "ShipRole": {
        "type": "string",
        "description": "The registered role of the ship",
        "enum": [
          "FABRICATOR",
          "HARVESTER",
          "HAULER",
          "INTERCEPTOR",
          "EXCAVATOR",
          "TRANSPORT",
          "REPAIR",
          "SURVEYOR",
          "COMMAND",
          "CARRIER",
          "PATROL",
          "SATELLITE",
          "EXPLORER",
          "REFINERY"
        ]
      },
      "ShipType": {
        "type": "string",
        "description": "Type of ship",
        "enum": [
          "SHIP_PROBE",
          "SHIP_MINING_DRONE",
          "SHIP_SIPHON_DRONE",
          "SHIP_INTERCEPTOR",
          "SHIP_LIGHT_HAULER",
          "SHIP_COMMAND_FRIGATE",
          "SHIP_EXPLORER",
          "SHIP_HEAVY_FREIGHTER",
          "SHIP_LIGHT_SHUTTLE",
          "SHIP_ORE_HOUND",
          "SHIP_REFINING_FREIGHTER",
          "SHIP_SURVEYOR"
        ]
      },
      "Shipyard": {
        "required": [
          "modificationsFee",
          "shipTypes",
          "symbol"
        ],
        "type": "object",
        "properties": {
          "symbol": {
            "minLength": 1,
            "type": "string",
            "description": "The symbol of the shipyard. The symbol is the same as the waypoint where the shipyard is located."
          },
          "shipTypes": {
            "type": "array",
            "description": "The list of ship types available for purchase at this shipyard.",
            "items": {
              "required": [
                "type"
              ],
              "type": "object",
              "properties": {
                "type": {
                  "$ref": "#/components/schemas/ShipType"
                }
              }
            }
          },
          "transactions": {
            "type": "array",
            "description": "The list of recent transactions at this shipyard.",
            "items": {
              "$ref": "#/components/schemas/ShipyardTransaction"
            }
          },
          "ships": {
            "type": "array",
            "description": "The ships that are currently available for purchase at the shipyard.",
            "items": {
              "$ref": "#/components/schemas/ShipyardShip"
            }
          },
          "modificationsFee": {
            "type": "integer",
            "description": "The fee to modify a ship at this shipyard. This includes installing or removing modules and mounts on a ship. In the case of mounts, the fee is a flat rate per mount. In the case of modules, the fee is per slot the module occupies."
          }
        },
        "description": ""
      },
      "ShipyardShip": {
        "required": [
          "crew",
          "description",
          "engine",
          "frame",
          "modules",
          "mounts",
          "name",
          "purchasePrice",
          "reactor",
          "supply",
          "symbol",
          "type"
        ],
        "type": "object",
        "properties": {
          "type": {
            "$ref": "#/components/schemas/ShipType"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "supply": {
            "$ref": "#/components/schemas/SupplyLevel"
          },
          "activity": {
            "$ref": "#/components/schemas/ActivityLevel"
          },
          "purchasePrice": {
            "type": "integer"
          },
          "frame": {
            "$ref": "#/components/schemas/ShipFrame"
          },
          "reactor": {
            "$ref": "#/components/schemas/ShipReactor"
          },
          "engine": {
            "$ref": "#/components/schemas/ShipEngine"
          },
          "modules": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ShipModule"
            }
          },
          "mounts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ShipMount"
            }
          },
          "crew": {
            "required": [
              "capacity",
              "required"
            ],
            "type": "object",
            "properties": {
              "required": {
                "type": "integer"
              },
              "capacity": {
                "type": "integer"
              }
            }
          }
        },
        "description": ""
      },
      "ShipyardTransaction": {
        "required": [
          "agentSymbol",
          "price",
          "shipSymbol",
          "shipType",
          "timestamp",
          "waypointSymbol"
        ],
        "type": "object",
        "properties": {
          "waypointSymbol": {
            "$ref": "#/components/schemas/WaypointSymbol"
          },
          "shipSymbol": {
            "type": "string",
            "description": "The symbol of the ship that was the subject of the transaction.",
            "deprecated": true
          },
          "shipType": {
            "type": "string",
            "description": "The symbol of the ship that was the subject of the transaction."
          },
          "price": {
            "minimum": 0,
            "type": "integer",
            "description": "The price of the transaction."
          },
          "agentSymbol": {
            "type": "string",
            "description": "The symbol of the agent that made the transaction."
          },
          "timestamp": {
            "type": "string",
            "description": "The timestamp of the transaction.",
            "format": "date-time"
          }
        },
        "description": "Results of a transaction with a shipyard."
      },
      "Siphon": {
        "required": [
          "shipSymbol",
          "yield"
        ],
        "type": "object",
        "properties": {
          "shipSymbol": {
            "minLength": 1,
            "type": "string",
            "description": "Symbol of the ship that executed the siphon."
          },
          "yield": {
            "$ref": "#/components/schemas/SiphonYield"
          }
        },
        "description": "Siphon details."
      },
      "SiphonYield": {
        "required": [
          "symbol",
          "units"
        ],
        "type": "object",
        "properties": {
          "symbol": {
            "$ref": "#/components/schemas/TradeSymbol"
          },
          "units": {
            "type": "integer",
            "description": "The number of units siphoned that were placed into the ship's cargo hold."
          }
        },
        "description": "A yield from the siphon operation."
      },
      "SupplyLevel": {
        "type": "string",
        "description": "The supply level of a trade good.",
        "enum": [
          "SCARCE",
          "LIMITED",
          "MODERATE",
          "HIGH",
          "ABUNDANT"
        ]
      },
      "Survey": {
        "required": [
          "deposits",
          "expiration",
          "signature",
          "size",
          "symbol"
        ],
        "type": "object",
        "properties": {
          "signature": {
            "minLength": 1,
            "type": "string",
            "description": "A unique signature for the location of this survey. This signature is verified when attempting an extraction using this survey."
          },
          "symbol": {
            "minLength": 1,
            "type": "string",
            "description": "The symbol of the waypoint that this survey is for."
          },
          "deposits": {
            "type": "array",
            "description": "A list of deposits that can be found at this location. A ship will extract one of these deposits when using this survey in an extraction request. If multiple deposits of the same type are present, the chance of extracting that deposit is increased.",
            "items": {
              "$ref": "#/components/schemas/SurveyDeposit"
            }
          },
          "expiration": {
            "type": "string",
            "description": "The date and time when the survey expires. After this date and time, the survey will no longer be available for extraction.",
            "format": "date-time"
          },
          "size": {
            "type": "string",
            "description": "The size of the deposit. This value indicates how much can be extracted from the survey before it is exhausted.",
            "enum": [
              "SMALL",
              "MODERATE",
              "LARGE"
            ]
          }
        },
        "description": "A resource survey of a waypoint, detailing a specific extraction location and the types of resources that can be found there."
      },
      "SurveyDeposit": {
        "required": [
          "symbol"
        ],
        "type": "object",
        "properties": {
          "symbol": {
            "type": "string",
            "description": "The symbol of the deposit."
          }
        },
        "description": "A surveyed deposit of a mineral or resource available for extraction."
      },
      "System": {
        "required": [
          "factions",
          "sectorSymbol",
          "symbol",
          "type",
          "waypoints",
          "x",
          "y"
        ],
        "type": "object",
        "properties": {
          "symbol": {
            "minLength": 1,
            "type": "string",
            "description": "The symbol of the system."
          },
          "sectorSymbol": {
            "minLength": 1,
            "type": "string",
            "description": "The symbol of the sector."
          },
          "type": {
            "$ref": "#/components/schemas/SystemType"
          },
          "x": {
            "type": "integer",
            "description": "Relative position of the system in the sector in the x axis."
          },
          "y": {
            "type": "integer",
            "description": "Relative position of the system in the sector in the y axis."
          },
          "waypoints": {
            "type": "array",
            "description": "Waypoints in this system.",
            "items": {
              "$ref": "#/components/schemas/SystemWaypoint"
            }
          },
          "factions": {
            "type": "array",
            "description": "Factions that control this system.",
            "items": {
              "$ref": "#/components/schemas/SystemFaction"
            }
          }
        }
      },
      "SystemFaction": {
        "required": [
          "symbol"
        ],
        "type": "object",
        "properties": {
          "symbol": {
            "$ref": "#/components/schemas/FactionSymbol"
          }
        }
      },
      "SystemSymbol": {
        "minLength": 1,
        "type": "string",
        "description": "The symbol of the system.",
        "x-faker": {
          "fake": [
            "X1-{{random.alphaNumeric(5)}}"
          ]
        }
      },
      "SystemType": {
        "type": "string",
        "description": "The type of system.",
        "enum": [
          "NEUTRON_STAR",
          "RED_STAR",
          "ORANGE_STAR",
          "BLUE_STAR",
          "YOUNG_STAR",
          "WHITE_DWARF",
          "BLACK_HOLE",
          "HYPERGIANT",
          "NEBULA",
          "UNSTABLE"
        ]
      },
      "SystemWaypoint": {
        "required": [
          "orbitals",
          "symbol",
          "type",
          "x",
          "y"
        ],
        "type": "object",
        "properties": {
          "symbol": {
            "$ref": "#/components/schemas/WaypointSymbol"
          },
          "type": {
            "$ref": "#/components/schemas/WaypointType"
          },
          "x": {
            "type": "integer",
            "description": "Relative position of the waypoint on the system's x axis. This is not an absolute position in the universe."
          },
          "y": {
            "type": "integer",
            "description": "Relative position of the waypoint on the system's y axis. This is not an absolute position in the universe."
          },
          "orbitals": {
            "type": "array",
            "description": "Waypoints that orbit this waypoint.",
            "items": {
              "$ref": "#/components/schemas/WaypointOrbital"
            }
          },
          "orbits": {
            "minLength": 1,
            "type": "string",
            "description": "The symbol of the parent waypoint, if this waypoint is in orbit around another waypoint. Otherwise this value is undefined."
          }
        }
      },
      "TradeGood": {
        "required": [
          "description",
          "name",
          "symbol"
        ],
        "type": "object",
        "properties": {
          "symbol": {
            "$ref": "#/components/schemas/TradeSymbol"
          },
          "name": {
            "type": "string",
            "description": "The name of the good."
          },
          "description": {
            "type": "string",
            "description": "The description of the good."
          }
        },
        "description": "A good that can be traded for other goods or currency."
      },
      "TradeSymbol": {
        "type": "string",
        "description": "The good's symbol.",
        "enum": [
          "PRECIOUS_STONES",
          "QUARTZ_SAND",
          "SILICON_CRYSTALS",
          "AMMONIA_ICE",
          "LIQUID_HYDROGEN",
          "LIQUID_NITROGEN",
          "ICE_WATER",
          "EXOTIC_MATTER",
          "ADVANCED_CIRCUITRY",
          "GRAVITON_EMITTERS",
          "IRON",
          "IRON_ORE",
          "COPPER",
          "COPPER_ORE",
          "ALUMINUM",
          "ALUMINUM_ORE",
          "SILVER",
          "SILVER_ORE",
          "GOLD",
          "GOLD_ORE",
          "PLATINUM",
          "PLATINUM_ORE",
          "DIAMONDS",
          "URANITE",
          "URANITE_ORE",
          "MERITIUM",
          "MERITIUM_ORE",
          "HYDROCARBON",
          "ANTIMATTER",
          "FAB_MATS",
          "FERTILIZERS",
          "FABRICS",
          "FOOD",
          "JEWELRY",
          "MACHINERY",
          "FIREARMS",
          "ASSAULT_RIFLES",
          "MILITARY_EQUIPMENT",
          "EXPLOSIVES",
          "LAB_INSTRUMENTS",
          "AMMUNITION",
          "ELECTRONICS",
          "SHIP_PLATING",
          "SHIP_PARTS",
          "EQUIPMENT",
          "FUEL",
          "MEDICINE",
          "DRUGS",
          "CLOTHING",
          "MICROPROCESSORS",
          "PLASTICS",
          "POLYNUCLEOTIDES",
          "BIOCOMPOSITES",
          "QUANTUM_STABILIZERS",
          "NANOBOTS",
          "AI_MAINFRAMES",
          "QUANTUM_DRIVES",
          "ROBOTIC_DRONES",
          "CYBER_IMPLANTS",
          "GENE_THERAPEUTICS",
          "NEURAL_CHIPS",
          "MOOD_REGULATORS",
          "VIRAL_AGENTS",
          "MICRO_FUSION_GENERATORS",
          "SUPERGRAINS",
          "LASER_RIFLES",
          "HOLOGRAPHICS",
          "SHIP_SALVAGE",
          "RELIC_TECH",
          "NOVEL_LIFEFORMS",
          "BOTANICAL_SPECIMENS",
          "CULTURAL_ARTIFACTS",
          "FRAME_PROBE",
          "FRAME_DRONE",
          "FRAME_INTERCEPTOR",
          "FRAME_RACER",
          "FRAME_FIGHTER",
          "FRAME_FRIGATE",
          "FRAME_SHUTTLE",
          "FRAME_EXPLORER",
          "FRAME_MINER",
          "FRAME_LIGHT_FREIGHTER",
          "FRAME_HEAVY_FREIGHTER",
          "FRAME_TRANSPORT",
          "FRAME_DESTROYER",
          "FRAME_CRUISER",
          "FRAME_CARRIER",
          "REACTOR_SOLAR_I",
          "REACTOR_FUSION_I",
          "REACTOR_FISSION_I",
          "REACTOR_CHEMICAL_I",
          "REACTOR_ANTIMATTER_I",
          "ENGINE_IMPULSE_DRIVE_I",
          "ENGINE_ION_DRIVE_I",
          "ENGINE_ION_DRIVE_II",
          "ENGINE_HYPER_DRIVE_I",
          "MODULE_MINERAL_PROCESSOR_I",
          "MODULE_GAS_PROCESSOR_I",
          "MODULE_CARGO_HOLD_I",
          "MODULE_CARGO_HOLD_II",
          "MODULE_CARGO_HOLD_III",
          "MODULE_CREW_QUARTERS_I",
          "MODULE_ENVOY_QUARTERS_I",
          "MODULE_PASSENGER_CABIN_I",
          "MODULE_MICRO_REFINERY_I",
          "MODULE_SCIENCE_LAB_I",
          "MODULE_JUMP_DRIVE_I",
          "MODULE_JUMP_DRIVE_II",
          "MODULE_JUMP_DRIVE_III",
          "MODULE_WARP_DRIVE_I",
          "MODULE_WARP_DRIVE_II",
          "MODULE_WARP_DRIVE_III",
          "MODULE_SHIELD_GENERATOR_I",
          "MODULE_SHIELD_GENERATOR_II",
          "MODULE_ORE_REFINERY_I",
          "MODULE_FUEL_REFINERY_I",
          "MOUNT_GAS_SIPHON_I",
          "MOUNT_GAS_SIPHON_II",
          "MOUNT_GAS_SIPHON_III",
          "MOUNT_SURVEYOR_I",
          "MOUNT_SURVEYOR_II",
          "MOUNT_SURVEYOR_III",
          "MOUNT_SENSOR_ARRAY_I",
          "MOUNT_SENSOR_ARRAY_II",
          "MOUNT_SENSOR_ARRAY_III",
          "MOUNT_MINING_LASER_I",
          "MOUNT_MINING_LASER_II",
          "MOUNT_MINING_LASER_III",
          "MOUNT_LASER_CANNON_I",
          "MOUNT_MISSILE_LAUNCHER_I",
          "MOUNT_TURRET_I",
          "SHIP_PROBE",
          "SHIP_MINING_DRONE",
          "SHIP_SIPHON_DRONE",
          "SHIP_INTERCEPTOR",
          "SHIP_LIGHT_HAULER",
          "SHIP_COMMAND_FRIGATE",
          "SHIP_EXPLORER",
          "SHIP_HEAVY_FREIGHTER",
          "SHIP_LIGHT_SHUTTLE",
          "SHIP_ORE_HOUND",
          "SHIP_REFINING_FREIGHTER",
          "SHIP_SURVEYOR"
        ]
      },
      "Waypoint": {
        "required": [
          "isUnderConstruction",
          "orbitals",
          "symbol",
          "systemSymbol",
          "traits",
          "type",
          "x",
          "y"
        ],
        "type": "object",
        "properties": {
          "symbol": {
            "$ref": "#/components/schemas/WaypointSymbol"
          },
          "type": {
            "$ref": "#/components/schemas/WaypointType"
          },
          "systemSymbol": {
            "$ref": "#/components/schemas/SystemSymbol"
          },
          "x": {
            "type": "integer",
            "description": "Relative position of the waypoint on the system's x axis. This is not an absolute position in the universe."
          },
          "y": {
            "type": "integer",
            "description": "Relative position of the waypoint on the system's y axis. This is not an absolute position in the universe."
          },
          "orbitals": {
            "type": "array",
            "description": "Waypoints that orbit this waypoint.",
            "items": {
              "$ref": "#/components/schemas/WaypointOrbital"
            }
          },
          "orbits": {
            "minLength": 1,
            "type": "string",
            "description": "The symbol of the parent waypoint, if this waypoint is in orbit around another waypoint. Otherwise this value is undefined."
          },
          "faction": {
            "$ref": "#/components/schemas/WaypointFaction"
          },
          "traits": {
            "type": "array",
            "description": "The traits of the waypoint.",
            "items": {
              "$ref": "#/components/schemas/WaypointTrait"
            }
          },
          "modifiers": {
            "type": "array",
            "description": "The modifiers of the waypoint.",
            "items": {
              "$ref": "#/components/schemas/WaypointModifier"
            }
          },
          "chart": {
            "$ref": "#/components/schemas/Chart"
          },
          "isUnderConstruction": {
            "type": "boolean",
            "description": "True if the waypoint is under construction."
          }
        },
        "description": "A waypoint is a location that ships can travel to such as a Planet, Moon or Space Station."
      },
      "WaypointFaction": {
        "required": [
          "symbol"
        ],
        "type": "object",
        "properties": {
          "symbol": {
            "$ref": "#/components/schemas/FactionSymbol"
          }
        },
        "description": "The faction that controls the waypoint."
      },
      "WaypointModifier": {
        "required": [
          "description",
          "name",
          "symbol"
        ],
        "type": "object",
        "properties": {
          "symbol": {
            "$ref": "#/components/schemas/WaypointModifierSymbol"
          },
          "name": {
            "type": "string",
            "description": "The name of the trait."
          },
          "description": {
            "type": "string",
            "description": "A description of the trait."
          }
        }
      },
      "WaypointModifierSymbol": {
        "type": "string",
        "description": "The unique identifier of the modifier.",
        "enum": [
          "STRIPPED",
          "UNSTABLE",
          "RADIATION_LEAK",
          "CRITICAL_LIMIT",
          "CIVIL_UNREST"
        ]
      },
      "WaypointOrbital": {
        "required": [
          "symbol"
        ],
        "type": "object",
        "properties": {
          "symbol": {
            "minLength": 1,
            "type": "string",
            "description": "The symbol of the orbiting waypoint."
          }
        },
        "description": "An orbital is another waypoint that orbits a parent waypoint."
      },
      "WaypointSymbol": {
        "minLength": 1,
        "type": "string",
        "description": "The symbol of the waypoint.",
        "x-faker": {
          "fake": [
            "X1-{{random.alphaNumeric(5)}}-{{random.alphaNumeric(5)}}"
          ]
        }
      },
      "WaypointTrait": {
        "required": [
          "description",
          "name",
          "symbol"
        ],
        "type": "object",
        "properties": {
          "symbol": {
            "$ref": "#/components/schemas/WaypointTraitSymbol"
          },
          "name": {
            "type": "string",
            "description": "The name of the trait."
          },
          "description": {
            "type": "string",
            "description": "A description of the trait."
          }
        }
      },
      "WaypointTraitSymbol": {
        "type": "string",
        "description": "The unique identifier of the trait.",
        "enum": [
          "UNCHARTED",
          "UNDER_CONSTRUCTION",
          "MARKETPLACE",
          "SHIPYARD",
          "OUTPOST",
          "SCATTERED_SETTLEMENTS",
          "SPRAWLING_CITIES",
          "MEGA_STRUCTURES",
          "PIRATE_BASE",
          "OVERCROWDED",
          "HIGH_TECH",
          "CORRUPT",
          "BUREAUCRATIC",
          "TRADING_HUB",
          "INDUSTRIAL",
          "BLACK_MARKET",
          "RESEARCH_FACILITY",
          "MILITARY_BASE",
          "SURVEILLANCE_OUTPOST",
          "EXPLORATION_OUTPOST",
          "MINERAL_DEPOSITS",
          "COMMON_METAL_DEPOSITS",
          "PRECIOUS_METAL_DEPOSITS",
          "RARE_METAL_DEPOSITS",
          "METHANE_POOLS",
          "ICE_CRYSTALS",
          "EXPLOSIVE_GASES",
          "STRONG_MAGNETOSPHERE",
          "VIBRANT_AURORAS",
          "SALT_FLATS",
          "CANYONS",
          "PERPETUAL_DAYLIGHT",
          "PERPETUAL_OVERCAST",
          "DRY_SEABEDS",
          "MAGMA_SEAS",
          "SUPERVOLCANOES",
          "ASH_CLOUDS",
          "VAST_RUINS",
          "MUTATED_FLORA",
          "TERRAFORMED",
          "EXTREME_TEMPERATURES",
          "EXTREME_PRESSURE",
          "DIVERSE_LIFE",
          "SCARCE_LIFE",
          "FOSSILS",
          "WEAK_GRAVITY",
          "STRONG_GRAVITY",
          "CRUSHING_GRAVITY",
          "TOXIC_ATMOSPHERE",
          "CORROSIVE_ATMOSPHERE",
          "BREATHABLE_ATMOSPHERE",
          "THIN_ATMOSPHERE",
          "JOVIAN",
          "ROCKY",
          "VOLCANIC",
          "FROZEN",
          "SWAMP",
          "BARREN",
          "TEMPERATE",
          "JUNGLE",
          "OCEAN",
          "RADIOACTIVE",
          "MICRO_GRAVITY_ANOMALIES",
          "DEBRIS_CLUSTER",
          "DEEP_CRATERS",
          "SHALLOW_CRATERS",
          "UNSTABLE_COMPOSITION",
          "HOLLOWED_INTERIOR",
          "STRIPPED"
        ]
      },
      "WaypointType": {
        "type": "string",
        "description": "The type of waypoint.",
        "enum": [
          "PLANET",
          "GAS_GIANT",
          "MOON",
          "ORBITAL_STATION",
          "JUMP_GATE",
          "ASTEROID_FIELD",
          "ASTEROID",
          "ENGINEERED_ASTEROID",
          "ASTEROID_BASE",
          "NEBULA",
          "DEBRIS_FIELD",
          "GRAVITY_WELL",
          "ARTIFICIAL_GRAVITY_WELL",
          "FUEL_STATION"
        ]
      }
    },
    "requestBodies": {},
    "securitySchemes": {
      "AgentToken": {
        "type": "http",
        "description": "When you register a new agent you will be granted a private bearer token which grants authorization to use the API.",
        "scheme": "bearer"
      }
    }
  }
}