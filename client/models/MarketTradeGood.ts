/**
 * SpaceTraders API
 * SpaceTraders is an open-universe game and learning platform that offers a set of HTTP endpoints to control a fleet of ships and explore a multiplayer universe.  The API is documented using [OpenAPI](https://github.com/SpaceTradersAPI/api-docs). You can send your first request right here in your browser to check the status of the game server.  ```json http {   \"method\": \"GET\",   \"url\": \"https://api.spacetraders.io/v2\", } ```  Unlike a traditional game, SpaceTraders does not have a first-party client or app to play the game. Instead, you can use the API to build your own client, write a script to automate your ships, or try an app built by the community.  We have a [Discord channel](https://discord.com/invite/jh6zurdWk5) where you can share your projects, ask questions, and get help from other players.   
 *
 * OpenAPI spec version: 2.0.0
 * Contact: joel@spacetraders.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { ActivityLevel } from '../models/ActivityLevel.ts';
import { SupplyLevel } from '../models/SupplyLevel.ts';
import { TradeSymbol } from '../models/TradeSymbol.ts';
import { HttpFile } from '../http/http.ts';

export class MarketTradeGood {
    'symbol': TradeSymbol;
    /**
    * The type of trade good (export, import, or exchange).
    */
    'type': MarketTradeGoodTypeEnum;
    /**
    * This is the maximum number of units that can be purchased or sold at this market in a single trade for this good. Trade volume also gives an indication of price volatility. A market with a low trade volume will have large price swings, while high trade volume will be more resilient to price changes.
    */
    'tradeVolume': number;
    'supply': SupplyLevel;
    'activity'?: ActivityLevel;
    /**
    * The price at which this good can be purchased from the market.
    */
    'purchasePrice': number;
    /**
    * The price at which this good can be sold to the market.
    */
    'sellPrice': number;

    static readonly discriminator: string | undefined = undefined;

    static readonly attributeTypeMap: Array<{name: string, baseName: string, type: string, format: string}> = [
        {
            "name": "symbol",
            "baseName": "symbol",
            "type": "TradeSymbol",
            "format": ""
        },
        {
            "name": "type",
            "baseName": "type",
            "type": "MarketTradeGoodTypeEnum",
            "format": ""
        },
        {
            "name": "tradeVolume",
            "baseName": "tradeVolume",
            "type": "number",
            "format": ""
        },
        {
            "name": "supply",
            "baseName": "supply",
            "type": "SupplyLevel",
            "format": ""
        },
        {
            "name": "activity",
            "baseName": "activity",
            "type": "ActivityLevel",
            "format": ""
        },
        {
            "name": "purchasePrice",
            "baseName": "purchasePrice",
            "type": "number",
            "format": ""
        },
        {
            "name": "sellPrice",
            "baseName": "sellPrice",
            "type": "number",
            "format": ""
        }    ];

    static getAttributeTypeMap() {
        return MarketTradeGood.attributeTypeMap;
    }

    public constructor() {
    }
}


export enum MarketTradeGoodTypeEnum {
    Export = 'EXPORT',
    Import = 'IMPORT',
    Exchange = 'EXCHANGE'
}

